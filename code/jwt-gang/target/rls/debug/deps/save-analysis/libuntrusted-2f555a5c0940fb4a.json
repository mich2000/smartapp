{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2","program":"/home/mich/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","untrusted","/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-Cembed-bitcode=no","-C","debuginfo=2","-C","metadata=2f555a5c0940fb4a","-C","extra-filename=-2f555a5c0940fb4a","--out-dir","/home/mich/School/smartapp/code/jwt-gang/target/rls/debug/deps","-L","dependency=/home/mich/School/smartapp/code/jwt-gang/target/rls/debug/deps","--cap-lints","allow","--error-format=json","--sysroot","/home/mich/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/mich/School/smartapp/code/jwt-gang/target/rls/debug/deps/libuntrusted-2f555a5c0940fb4a.rmeta"},"prelude":{"crate_id":{"name":"untrusted","disambiguator":[3646201447884102385,12379206145676824587]},"crate_root":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src","external_crates":[{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs","num":1,"id":{"name":"core","disambiguator":[16851962707842592855,4932765248485690217]}},{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[3049591816127030880,10952373373500329976]}},{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs","num":3,"id":{"name":"rustc_std_workspace_core","disambiguator":[11587085401131637304,2097967498245787009]}}],"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs","byte_start":770,"byte_end":16553,"line_start":15,"line_end":449,"column_start":1,"column_end":2}},"imports":[],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs","byte_start":770,"byte_end":16553,"line_start":15,"line_end":449,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":58},{"krate":0,"index":71},{"krate":0,"index":69},{"krate":0,"index":66},{"krate":0,"index":61},{"krate":0,"index":63},{"krate":0,"index":4},{"krate":0,"index":19},{"krate":0,"index":23},{"krate":0,"index":27},{"krate":0,"index":74},{"krate":0,"index":78},{"krate":0,"index":31},{"krate":0,"index":33},{"krate":0,"index":82},{"krate":0,"index":93},{"krate":0,"index":92},{"krate":0,"index":90},{"krate":0,"index":87},{"krate":0,"index":88},{"krate":0,"index":84},{"krate":0,"index":85},{"krate":0,"index":46}],"decl_id":null,"docs":" untrusted.rs: Safe, fast, zero-panic, zero-crashing, zero-allocation\n parsing of untrusted inputs in Rust.","sig":null,"attributes":[{"value":"! untrusted.rs: Safe, fast, zero-panic, zero-crashing, zero-allocation","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs","byte_start":770,"byte_end":842,"line_start":15,"line_end":15,"column_start":1,"column_end":73}},{"value":"! parsing of untrusted inputs in Rust.","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs","byte_start":843,"byte_end":883,"line_start":16,"line_end":16,"column_start":1,"column_end":41}},{"value":"!","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs","byte_start":884,"byte_end":887,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"! <code>git clone https://github.com/briansmith/untrusted</code>","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs","byte_start":888,"byte_end":954,"line_start":18,"line_end":18,"column_start":1,"column_end":67}},{"value":"!","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs","byte_start":955,"byte_end":958,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"! untrusted.rs goes beyond Rust's normal safety guarantees by  also","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs","byte_start":959,"byte_end":1028,"line_start":20,"line_end":20,"column_start":1,"column_end":70}},{"value":"! guaranteeing that parsing will be panic-free, as long as","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs","byte_start":1029,"byte_end":1089,"line_start":21,"line_end":21,"column_start":1,"column_end":61}},{"value":"! `untrusted::Input::as_slice_less_safe()` is not used. It avoids copying","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs","byte_start":1090,"byte_end":1165,"line_start":22,"line_end":22,"column_start":1,"column_end":76}},{"value":"! data and heap allocation and strives to prevent common pitfalls such as","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs","byte_start":1166,"byte_end":1241,"line_start":23,"line_end":23,"column_start":1,"column_end":76}},{"value":"! accidentally parsing input bytes multiple times. In order to meet these","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs","byte_start":1242,"byte_end":1317,"line_start":24,"line_end":24,"column_start":1,"column_end":76}},{"value":"! goals, untrusted.rs is limited in functionality such that it works best for","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs","byte_start":1318,"byte_end":1397,"line_start":25,"line_end":25,"column_start":1,"column_end":80}},{"value":"! input languages with a small fixed amount of lookahead such as ASN.1, TLS,","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs","byte_start":1398,"byte_end":1476,"line_start":26,"line_end":26,"column_start":1,"column_end":79}},{"value":"! TCP/IP, and many other networking, IPC, and related protocols. Languages","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs","byte_start":1477,"byte_end":1553,"line_start":27,"line_end":27,"column_start":1,"column_end":77}},{"value":"! that require more lookahead and/or backtracking require some significant","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs","byte_start":1554,"byte_end":1630,"line_start":28,"line_end":28,"column_start":1,"column_end":77}},{"value":"! contortions to parse using this framework. It would not be realistic to use","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs","byte_start":1631,"byte_end":1710,"line_start":29,"line_end":29,"column_start":1,"column_end":80}},{"value":"! it for parsing programming language code, for example.","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs","byte_start":1711,"byte_end":1769,"line_start":30,"line_end":30,"column_start":1,"column_end":59}},{"value":"!","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs","byte_start":1770,"byte_end":1773,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"! The overall pattern for using untrusted.rs is:","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs","byte_start":1774,"byte_end":1824,"line_start":32,"line_end":32,"column_start":1,"column_end":51}},{"value":"!","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs","byte_start":1825,"byte_end":1828,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"! 1. Write a recursive-descent-style parser for the input language, where the","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs","byte_start":1829,"byte_end":1908,"line_start":34,"line_end":34,"column_start":1,"column_end":80}},{"value":"!    input data is given as a `&mut untrusted::Reader` parameter to each","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs","byte_start":1909,"byte_end":1983,"line_start":35,"line_end":35,"column_start":1,"column_end":75}},{"value":"!    function. Each function should have a return type of `Result<V, E>` for","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs","byte_start":1984,"byte_end":2062,"line_start":36,"line_end":36,"column_start":1,"column_end":79}},{"value":"!    some value type `V` and some error type `E`, either or both of which may","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs","byte_start":2063,"byte_end":2142,"line_start":37,"line_end":37,"column_start":1,"column_end":80}},{"value":"!    be `()`. Functions for parsing the lowest-level language constructs","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs","byte_start":2143,"byte_end":2217,"line_start":38,"line_end":38,"column_start":1,"column_end":75}},{"value":"!    should be defined. Those lowest-level functions will parse their inputs","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs","byte_start":2218,"byte_end":2296,"line_start":39,"line_end":39,"column_start":1,"column_end":79}},{"value":"!    using `::read_byte()`, `Reader::peek()`, and similar functions.","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs","byte_start":2297,"byte_end":2367,"line_start":40,"line_end":40,"column_start":1,"column_end":71}},{"value":"!    Higher-level language constructs are then parsed by calling the","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs","byte_start":2368,"byte_end":2438,"line_start":41,"line_end":41,"column_start":1,"column_end":71}},{"value":"!    lower-level functions in sequence.","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs","byte_start":2439,"byte_end":2480,"line_start":42,"line_end":42,"column_start":1,"column_end":42}},{"value":"!","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs","byte_start":2481,"byte_end":2484,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"! 2. Wrap the top-most functions of your recursive-descent parser in","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs","byte_start":2485,"byte_end":2555,"line_start":44,"line_end":44,"column_start":1,"column_end":71}},{"value":"!    functions that take their input data as an `untrusted::Input`. The","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs","byte_start":2556,"byte_end":2629,"line_start":45,"line_end":45,"column_start":1,"column_end":74}},{"value":"!    wrapper functions should call the `Input`'s `read_all` (or a variant","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs","byte_start":2630,"byte_end":2705,"line_start":46,"line_end":46,"column_start":1,"column_end":76}},{"value":"!    thereof) method. The wrapper functions are the only ones that should be","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs","byte_start":2706,"byte_end":2784,"line_start":47,"line_end":47,"column_start":1,"column_end":79}},{"value":"!    exposed outside the parser's module.","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs","byte_start":2785,"byte_end":2828,"line_start":48,"line_end":48,"column_start":1,"column_end":44}},{"value":"!","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs","byte_start":2829,"byte_end":2832,"line_start":49,"line_end":49,"column_start":1,"column_end":4}},{"value":"! 3. After receiving the input data to parse, wrap it in an `untrusted::Input`","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs","byte_start":2833,"byte_end":2913,"line_start":50,"line_end":50,"column_start":1,"column_end":81}},{"value":"!    using `untrusted::Input::from()` as early as possible. Pass the","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs","byte_start":2914,"byte_end":2984,"line_start":51,"line_end":51,"column_start":1,"column_end":71}},{"value":"!    `untrusted::Input` to the wrapper functions when they need to be parsed.","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs","byte_start":2985,"byte_end":3064,"line_start":52,"line_end":52,"column_start":1,"column_end":80}},{"value":"!","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs","byte_start":3065,"byte_end":3068,"line_start":53,"line_end":53,"column_start":1,"column_end":4}},{"value":"! In general parsers built using `untrusted::Reader` do not need to explicitly","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs","byte_start":3069,"byte_end":3149,"line_start":54,"line_end":54,"column_start":1,"column_end":81}},{"value":"! check for end-of-input unless they are parsing optional constructs, because","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs","byte_start":3150,"byte_end":3229,"line_start":55,"line_end":55,"column_start":1,"column_end":80}},{"value":"! `Reader::read_byte()` will return `Err(EndOfInput)` on end-of-input.","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs","byte_start":3230,"byte_end":3302,"line_start":56,"line_end":56,"column_start":1,"column_end":73}},{"value":"! Similarly, parsers using `untrusted::Reader` generally don't need to check","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs","byte_start":3303,"byte_end":3381,"line_start":57,"line_end":57,"column_start":1,"column_end":79}},{"value":"! for extra junk at the end of the input as long as the parser's API uses the","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs","byte_start":3382,"byte_end":3461,"line_start":58,"line_end":58,"column_start":1,"column_end":80}},{"value":"! pattern described above, as `read_all` and its variants automatically check","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs","byte_start":3462,"byte_end":3541,"line_start":59,"line_end":59,"column_start":1,"column_end":80}},{"value":"! for trailing junk. `Reader::skip_to_end()` must be used when any remaining","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs","byte_start":3542,"byte_end":3620,"line_start":60,"line_end":60,"column_start":1,"column_end":79}},{"value":"! unread input should be ignored without triggering an error.","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs","byte_start":3621,"byte_end":3684,"line_start":61,"line_end":61,"column_start":1,"column_end":64}},{"value":"!","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs","byte_start":3685,"byte_end":3688,"line_start":62,"line_end":62,"column_start":1,"column_end":4}},{"value":"! untrusted.rs works best when all processing of the input data is done","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs","byte_start":3689,"byte_end":3762,"line_start":63,"line_end":63,"column_start":1,"column_end":74}},{"value":"! through the `untrusted::Input` and `untrusted::Reader` types. In","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs","byte_start":3763,"byte_end":3831,"line_start":64,"line_end":64,"column_start":1,"column_end":69}},{"value":"! particular, avoid trying to parse input data using functions that take","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs","byte_start":3832,"byte_end":3906,"line_start":65,"line_end":65,"column_start":1,"column_end":75}},{"value":"! byte slices. However, when you need to access a part of the input data as","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs","byte_start":3907,"byte_end":3984,"line_start":66,"line_end":66,"column_start":1,"column_end":78}},{"value":"! a slice to use a function that isn't written using untrusted.rs,","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs","byte_start":3985,"byte_end":4053,"line_start":67,"line_end":67,"column_start":1,"column_end":69}},{"value":"! `Input::as_slice_less_safe()` can be used.","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs","byte_start":4054,"byte_end":4100,"line_start":68,"line_end":68,"column_start":1,"column_end":47}},{"value":"!","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs","byte_start":4101,"byte_end":4104,"line_start":69,"line_end":69,"column_start":1,"column_end":4}},{"value":"! It is recommend to use `use untrusted;` and then `untrusted::Input`,","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs","byte_start":4105,"byte_end":4177,"line_start":70,"line_end":70,"column_start":1,"column_end":73}},{"value":"! `untrusted::Reader`, etc., instead of using `use untrusted::*`. Qualifying","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs","byte_start":4178,"byte_end":4256,"line_start":71,"line_end":71,"column_start":1,"column_end":79}},{"value":"! the names with `untrusted` helps remind the reader of the code that it is","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs","byte_start":4257,"byte_end":4334,"line_start":72,"line_end":72,"column_start":1,"column_end":78}},{"value":"! dealing with *untrusted* input.","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs","byte_start":4335,"byte_end":4370,"line_start":73,"line_end":73,"column_start":1,"column_end":36}},{"value":"!","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs","byte_start":4371,"byte_end":4374,"line_start":74,"line_end":74,"column_start":1,"column_end":4}},{"value":"! # Examples","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs","byte_start":4375,"byte_end":4389,"line_start":75,"line_end":75,"column_start":1,"column_end":15}},{"value":"!","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs","byte_start":4390,"byte_end":4393,"line_start":76,"line_end":76,"column_start":1,"column_end":4}},{"value":"! [*ring*](https://github.com/briansmith/ring)'s parser for the subset of","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs","byte_start":4394,"byte_end":4469,"line_start":77,"line_end":77,"column_start":1,"column_end":76}},{"value":"! ASN.1 DER it needs to understand,","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs","byte_start":4470,"byte_end":4507,"line_start":78,"line_end":78,"column_start":1,"column_end":38}},{"value":"! [`ring::der`](https://github.com/briansmith/ring/blob/master/src/der.rs),","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs","byte_start":4508,"byte_end":4585,"line_start":79,"line_end":79,"column_start":1,"column_end":78}},{"value":"! is built on top of untrusted.rs. *ring* also uses untrusted.rs to parse ECC","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs","byte_start":4586,"byte_end":4665,"line_start":80,"line_end":80,"column_start":1,"column_end":80}},{"value":"! public keys, RSA PKCS#1 1.5 padding, and for all other parsing it does.","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs","byte_start":4666,"byte_end":4741,"line_start":81,"line_end":81,"column_start":1,"column_end":76}},{"value":"!","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs","byte_start":4742,"byte_end":4745,"line_start":82,"line_end":82,"column_start":1,"column_end":4}},{"value":"! All of [webpki](https://github.com/briansmith/webpki)'s parsing of X.509","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs","byte_start":4746,"byte_end":4822,"line_start":83,"line_end":83,"column_start":1,"column_end":77}},{"value":"! certificates (also ASN.1 DER) is done using untrusted.rs.","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs","byte_start":4823,"byte_end":4884,"line_start":84,"line_end":84,"column_start":1,"column_end":62}},{"value":"allow(missing_copy_implementations, missing_debug_implementations,)","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs","byte_start":4944,"byte_end":5025,"line_start":88,"line_end":91,"column_start":1,"column_end":3}},{"value":"deny(unused_qualifications,)","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs","byte_start":5098,"byte_end":5136,"line_start":94,"line_end":96,"column_start":1,"column_end":3}},{"value":"forbid(anonymous_parameters, box_pointers, legacy_directory_ownership,\n         missing_docs, trivial_casts, trivial_numeric_casts, unsafe_code,\n         unstable_features, unused_extern_crates, unused_import_braces,\n         unused_results, variant_size_differences, warnings,)","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs","byte_start":5138,"byte_end":5447,"line_start":98,"line_end":112,"column_start":1,"column_end":3}},{"value":"no_std","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs","byte_start":5449,"byte_end":5459,"line_start":114,"line_end":114,"column_start":1,"column_end":11}}]},{"kind":"Struct","id":{"krate":0,"index":58},"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs","byte_start":5624,"byte_end":5629,"line_start":120,"line_end":120,"column_start":12,"column_end":17},"name":"Input","qualname":"::Input","value":"Input {  }","parent":null,"children":[{"krate":0,"index":60}],"decl_id":null,"docs":" A wrapper around `&'a [u8]` that helps in writing panic-free code.","sig":null,"attributes":[{"value":"/ A wrapper around `&'a [u8]` that helps in writing panic-free code.","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs","byte_start":5461,"byte_end":5531,"line_start":116,"line_end":116,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs","byte_start":5532,"byte_end":5535,"line_start":117,"line_end":117,"column_start":1,"column_end":4}},{"value":"/ No methods of `Input` will ever panic.","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs","byte_start":5536,"byte_end":5578,"line_start":118,"line_end":118,"column_start":1,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":6},"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs","byte_start":5763,"byte_end":5767,"line_start":126,"line_end":126,"column_start":12,"column_end":16},"name":"from","qualname":"<Input>::from","value":"pub fn from(&'a [u8]) -> Input","parent":null,"children":[],"decl_id":null,"docs":" Construct a new `Input` for the given input `bytes`.\n","sig":null,"attributes":[{"value":"/ Construct a new `Input` for the given input `bytes`.","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs","byte_start":5695,"byte_end":5751,"line_start":125,"line_end":125,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":7},"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs","byte_start":6396,"byte_end":6404,"line_start":138,"line_end":138,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<Input>::is_empty","value":"pub fn is_empty(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the input is empty and false otherwise.\n","sig":null,"attributes":[{"value":"/ Returns `true` if the input is empty and false otherwise.","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs","byte_start":6309,"byte_end":6370,"line_start":136,"line_end":136,"column_start":5,"column_end":66}},{"value":"inline","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs","byte_start":6375,"byte_end":6384,"line_start":137,"line_end":137,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":8},"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs","byte_start":6516,"byte_end":6520,"line_start":142,"line_end":142,"column_start":12,"column_end":16},"name":"iter","qualname":"<Input>::iter","value":"pub fn iter(&Self) -> <&[u8] as IntoIterator>::IntoIter","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over the input.\n","sig":null,"attributes":[{"value":"/ Returns an iterator over the input.","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs","byte_start":6451,"byte_end":6490,"line_start":140,"line_end":140,"column_start":5,"column_end":44}},{"value":"inline","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs","byte_start":6495,"byte_end":6504,"line_start":141,"line_end":141,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":9},"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs","byte_start":6668,"byte_end":6671,"line_start":148,"line_end":148,"column_start":12,"column_end":15},"name":"len","qualname":"<Input>::len","value":"pub fn len(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the length of the `Input`.\n","sig":null,"attributes":[{"value":"/ Returns the length of the `Input`.","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs","byte_start":6604,"byte_end":6642,"line_start":146,"line_end":146,"column_start":5,"column_end":43}},{"value":"inline","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs","byte_start":6647,"byte_end":6656,"line_start":147,"line_end":147,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":10},"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs","byte_start":6918,"byte_end":6926,"line_start":153,"line_end":153,"column_start":12,"column_end":20},"name":"read_all","qualname":"<Input>::read_all","value":"pub fn read_all<F, R, E>(&Self, E, F) -> Result<R, E> where\nF: FnOnce(&mut Reader) -> Result<R, E>","parent":null,"children":[],"decl_id":null,"docs":" Calls `read` with the given input as a `Reader`, ensuring that `read`\n consumed the entire input. If `read` does not consume the entire input,\n `incomplete_read` is returned.\n","sig":null,"attributes":[{"value":"/ Calls `read` with the given input as a `Reader`, ensuring that `read`","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs","byte_start":6714,"byte_end":6787,"line_start":150,"line_end":150,"column_start":5,"column_end":78}},{"value":"/ consumed the entire input. If `read` does not consume the entire input,","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs","byte_start":6792,"byte_end":6867,"line_start":151,"line_end":151,"column_start":5,"column_end":80}},{"value":"/ `incomplete_read` is returned.","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs","byte_start":6872,"byte_end":6906,"line_start":152,"line_end":152,"column_start":5,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":14},"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs","byte_start":7366,"byte_end":7378,"line_start":166,"line_end":166,"column_start":12,"column_end":24},"name":"read_all_mut","qualname":"<Input>::read_all_mut","value":"pub fn read_all_mut<F, R, E>(&Self, E, F) -> Result<R, E> where\nF: FnMut(&mut Reader) -> Result<R, E>","parent":null,"children":[],"decl_id":null,"docs":" Like `read_all`, except taking an `FnMut`.\n","sig":null,"attributes":[{"value":"/ Like `read_all`, except taking an `FnMut`.","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs","byte_start":7308,"byte_end":7354,"line_start":165,"line_end":165,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":18},"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs","byte_start":7975,"byte_end":7993,"line_start":182,"line_end":182,"column_start":12,"column_end":30},"name":"as_slice_less_safe","qualname":"<Input>::as_slice_less_safe","value":"pub fn as_slice_less_safe(&Self) -> &'a [u8]","parent":null,"children":[],"decl_id":null,"docs":" Access the input as a slice so it can be processed by functions that\n are not written using the Input/Reader framework.\n","sig":null,"attributes":[{"value":"/ Access the input as a slice so it can be processed by functions that","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs","byte_start":7819,"byte_end":7891,"line_start":179,"line_end":179,"column_start":5,"column_end":77}},{"value":"/ are not written using the Input/Reader framework.","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs","byte_start":7896,"byte_end":7949,"line_start":180,"line_end":180,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs","byte_start":7954,"byte_end":7963,"line_start":181,"line_end":181,"column_start":5,"column_end":14}}]},{"kind":"Function","id":{"krate":0,"index":27},"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs","byte_start":8782,"byte_end":8799,"line_start":209,"line_end":209,"column_start":8,"column_end":25},"name":"read_all_optional","qualname":"::read_all_optional","value":"pub fn read_all_optional<F, R, E>(Option<Input>, E, F) -> Result<R, E> where\nF: FnOnce(Option<&mut Reader>) -> Result<R, E>","parent":null,"children":[],"decl_id":null,"docs":" Calls `read` with the given input as a `Reader`, ensuring that `read`\n consumed the entire input. When `input` is `None`, `read` will be\n called with `None`.\n","sig":null,"attributes":[{"value":"/ Calls `read` with the given input as a `Reader`, ensuring that `read`","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs","byte_start":8607,"byte_end":8680,"line_start":206,"line_end":206,"column_start":1,"column_end":74}},{"value":"/ consumed the entire input. When `input` is `None`, `read` will be","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs","byte_start":8681,"byte_end":8750,"line_start":207,"line_end":207,"column_start":1,"column_end":70}},{"value":"/ called with `None`.","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs","byte_start":8751,"byte_end":8774,"line_start":208,"line_end":208,"column_start":1,"column_end":24}}]},{"kind":"Struct","id":{"krate":0,"index":74},"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs","byte_start":10084,"byte_end":10090,"line_start":242,"line_end":242,"column_start":12,"column_end":18},"name":"Reader","qualname":"::Reader","value":"Reader {  }","parent":null,"children":[{"krate":0,"index":76},{"krate":0,"index":77}],"decl_id":null,"docs":" A read-only, forward-only* cursor into the data in an `Input`.","sig":null,"attributes":[{"value":"/ A read-only, forward-only* cursor into the data in an `Input`.","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs","byte_start":9408,"byte_end":9474,"line_start":229,"line_end":229,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs","byte_start":9475,"byte_end":9478,"line_start":230,"line_end":230,"column_start":1,"column_end":4}},{"value":"/ Using `Reader` to parse input helps to ensure that no byte of the input","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs","byte_start":9479,"byte_end":9554,"line_start":231,"line_end":231,"column_start":1,"column_end":76}},{"value":"/ will be accidentally processed more than once. Using `Reader` in","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs","byte_start":9555,"byte_end":9623,"line_start":232,"line_end":232,"column_start":1,"column_end":69}},{"value":"/ conjunction with `read_all`, `read_all_mut`, and `read_all_optional`","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs","byte_start":9624,"byte_end":9696,"line_start":233,"line_end":233,"column_start":1,"column_end":73}},{"value":"/ helps ensure that no byte of the input is accidentally left unprocessed.","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs","byte_start":9697,"byte_end":9773,"line_start":234,"line_end":234,"column_start":1,"column_end":77}},{"value":"/ The methods of `Reader` never panic, so `Reader` also assists the writing","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs","byte_start":9774,"byte_end":9851,"line_start":235,"line_end":235,"column_start":1,"column_end":78}},{"value":"/ of panic-free code.","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs","byte_start":9852,"byte_end":9875,"line_start":236,"line_end":236,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs","byte_start":9876,"byte_end":9879,"line_start":237,"line_end":237,"column_start":1,"column_end":4}},{"value":"/ \\* `Reader` is not strictly forward-only because of the method","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs","byte_start":9880,"byte_end":9946,"line_start":238,"line_end":238,"column_start":1,"column_end":67}},{"value":"/ `get_input_between_marks`, which is provided mainly to support calculating","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs","byte_start":9947,"byte_end":10025,"line_start":239,"line_end":239,"column_start":1,"column_end":79}},{"value":"/ digests over parsed data.","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs","byte_start":10026,"byte_end":10055,"line_start":240,"line_end":240,"column_start":1,"column_end":30}}]},{"kind":"Struct","id":{"krate":0,"index":31},"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs","byte_start":10214,"byte_end":10218,"line_start":248,"line_end":248,"column_start":12,"column_end":16},"name":"Mark","qualname":"::Mark","value":"Mark {  }","parent":null,"children":[{"krate":0,"index":32}],"decl_id":null,"docs":" An index into the already-parsed input of a `Reader`.\n","sig":null,"attributes":[{"value":"/ An index into the already-parsed input of a `Reader`.","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs","byte_start":10145,"byte_end":10202,"line_start":247,"line_end":247,"column_start":1,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":35},"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs","byte_start":10451,"byte_end":10454,"line_start":257,"line_end":257,"column_start":12,"column_end":15},"name":"new","qualname":"<Reader>::new","value":"pub fn new(Input) -> Reader","parent":null,"children":[],"decl_id":null,"docs":" Construct a new Reader for the given input. Use `read_all`,\n `read_all_mut`, or `read_all_optional` instead of `Reader::new`\n whenever possible.\n","sig":null,"attributes":[{"value":"/ Construct a new Reader for the given input. Use `read_all`,","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs","byte_start":10263,"byte_end":10326,"line_start":253,"line_end":253,"column_start":5,"column_end":68}},{"value":"/ `read_all_mut`, or `read_all_optional` instead of `Reader::new`","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs","byte_start":10331,"byte_end":10398,"line_start":254,"line_end":254,"column_start":5,"column_end":72}},{"value":"/ whenever possible.","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs","byte_start":10403,"byte_end":10425,"line_start":255,"line_end":255,"column_start":5,"column_end":27}},{"value":"inline","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs","byte_start":10430,"byte_end":10439,"line_start":256,"line_end":256,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":36},"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs","byte_start":10661,"byte_end":10667,"line_start":264,"line_end":264,"column_start":12,"column_end":18},"name":"at_end","qualname":"<Reader>::at_end","value":"pub fn at_end(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the reader is at the end of the input, and `false`\n otherwise.\n","sig":null,"attributes":[{"value":"/ Returns `true` if the reader is at the end of the input, and `false`","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs","byte_start":10544,"byte_end":10616,"line_start":261,"line_end":261,"column_start":5,"column_end":77}},{"value":"/ otherwise.","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs","byte_start":10621,"byte_end":10635,"line_start":262,"line_end":262,"column_start":5,"column_end":19}},{"value":"inline","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs","byte_start":10640,"byte_end":10649,"line_start":263,"line_end":263,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":37},"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs","byte_start":10849,"byte_end":10872,"line_start":269,"line_end":269,"column_start":12,"column_end":35},"name":"get_input_between_marks","qualname":"<Reader>::get_input_between_marks","value":"pub fn get_input_between_marks(&Self, Mark, Mark) -> Result<Input, EndOfInput>","parent":null,"children":[],"decl_id":null,"docs":" Returns an `Input` for already-parsed input that has had its boundaries\n marked using `mark`.\n","sig":null,"attributes":[{"value":"/ Returns an `Input` for already-parsed input that has had its boundaries","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs","byte_start":10719,"byte_end":10794,"line_start":266,"line_end":266,"column_start":5,"column_end":80}},{"value":"/ marked using `mark`.","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs","byte_start":10799,"byte_end":10823,"line_start":267,"line_end":267,"column_start":5,"column_end":29}},{"value":"inline","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs","byte_start":10828,"byte_end":10837,"line_start":268,"line_end":268,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":39},"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs","byte_start":11268,"byte_end":11272,"line_start":279,"line_end":279,"column_start":12,"column_end":16},"name":"mark","qualname":"<Reader>::mark","value":"pub fn mark(&Self) -> Mark","parent":null,"children":[],"decl_id":null,"docs":" Return the current position of the `Reader` for future use in a call\n to `get_input_between_marks`.\n","sig":null,"attributes":[{"value":"/ Return the current position of the `Reader` for future use in a call","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs","byte_start":11132,"byte_end":11204,"line_start":276,"line_end":276,"column_start":5,"column_end":77}},{"value":"/ to `get_input_between_marks`.","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs","byte_start":11209,"byte_end":11242,"line_start":277,"line_end":277,"column_start":5,"column_end":38}},{"value":"inline","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs","byte_start":11247,"byte_end":11256,"line_start":278,"line_end":278,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":40},"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs","byte_start":11454,"byte_end":11458,"line_start":283,"line_end":283,"column_start":12,"column_end":16},"name":"peek","qualname":"<Reader>::peek","value":"pub fn peek(&Self, u8) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if there is at least one more byte in the input and that\n byte is equal to `b`, and false otherwise.\n","sig":null,"attributes":[{"value":"/ Returns `true` if there is at least one more byte in the input and that","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs","byte_start":11316,"byte_end":11391,"line_start":281,"line_end":281,"column_start":5,"column_end":80}},{"value":"/ byte is equal to `b`, and false otherwise.","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs","byte_start":11396,"byte_end":11442,"line_start":282,"line_end":282,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":41},"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs","byte_start":11796,"byte_end":11805,"line_start":294,"line_end":294,"column_start":12,"column_end":21},"name":"read_byte","qualname":"<Reader>::read_byte","value":"pub fn read_byte(&mut Self) -> Result<u8, EndOfInput>","parent":null,"children":[],"decl_id":null,"docs":" Reads the next input byte.","sig":null,"attributes":[{"value":"/ Reads the next input byte.","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs","byte_start":11615,"byte_end":11645,"line_start":290,"line_end":290,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs","byte_start":11650,"byte_end":11653,"line_start":291,"line_end":291,"column_start":5,"column_end":8}},{"value":"/ Returns `Ok(b)` where `b` is the next input byte, or `Err(EndOfInput)`","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs","byte_start":11658,"byte_end":11732,"line_start":292,"line_end":292,"column_start":5,"column_end":79}},{"value":"/ if the `Reader` is at the end of the input.","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs","byte_start":11737,"byte_end":11784,"line_start":293,"line_end":293,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":42},"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs","byte_start":12249,"byte_end":12253,"line_start":308,"line_end":308,"column_start":12,"column_end":16},"name":"skip","qualname":"<Reader>::skip","value":"pub fn skip(&mut Self, usize) -> Result<(), EndOfInput>","parent":null,"children":[],"decl_id":null,"docs":" Skips `num_bytes` of the input.","sig":null,"attributes":[{"value":"/ Skips `num_bytes` of the input.","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs","byte_start":12074,"byte_end":12109,"line_start":304,"line_end":304,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs","byte_start":12114,"byte_end":12117,"line_start":305,"line_end":305,"column_start":5,"column_end":8}},{"value":"/ Returns `Ok(())` if there are at least `num_bytes` of input remaining,","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs","byte_start":12122,"byte_end":12196,"line_start":306,"line_end":306,"column_start":5,"column_end":79}},{"value":"/ and `Err(EndOfInput)` otherwise.","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs","byte_start":12201,"byte_end":12237,"line_start":307,"line_end":307,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":44},"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs","byte_start":12618,"byte_end":12636,"line_start":316,"line_end":316,"column_start":12,"column_end":30},"name":"skip_and_get_input","qualname":"<Reader>::skip_and_get_input","value":"pub fn skip_and_get_input(&mut Self, usize) -> Result<Input, EndOfInput>","parent":null,"children":[],"decl_id":null,"docs":" Skips `num_bytes` of the input, returning the skipped input as an `Input`.","sig":null,"attributes":[{"value":"/ Skips `num_bytes` of the input, returning the skipped input as an `Input`.","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs","byte_start":12377,"byte_end":12455,"line_start":312,"line_end":312,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs","byte_start":12460,"byte_end":12463,"line_start":313,"line_end":313,"column_start":5,"column_end":8}},{"value":"/ Returns `Ok(i)` where `i` is an `Input` if there are at least","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs","byte_start":12468,"byte_end":12533,"line_start":314,"line_end":314,"column_start":5,"column_end":70}},{"value":"/ `num_bytes` of input remaining, and `Err(EndOfInput)` otherwise.","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs","byte_start":12538,"byte_end":12606,"line_start":315,"line_end":315,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":45},"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs","byte_start":13154,"byte_end":13165,"line_start":328,"line_end":328,"column_start":12,"column_end":23},"name":"skip_to_end","qualname":"<Reader>::skip_to_end","value":"pub fn skip_to_end(&mut Self) -> Input","parent":null,"children":[],"decl_id":null,"docs":" Skips the reader to the end of the input, returning the skipped input\n as an `Input`.\n","sig":null,"attributes":[{"value":"/ Skips the reader to the end of the input, returning the skipped input","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs","byte_start":13046,"byte_end":13119,"line_start":326,"line_end":326,"column_start":5,"column_end":78}},{"value":"/ as an `Input`.","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs","byte_start":13124,"byte_end":13142,"line_start":327,"line_end":327,"column_start":5,"column_end":23}}]},{"kind":"Struct","id":{"krate":0,"index":82},"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs","byte_start":13470,"byte_end":13480,"line_start":337,"line_end":337,"column_start":12,"column_end":22},"name":"EndOfInput","qualname":"::EndOfInput","value":"","parent":null,"children":[],"decl_id":null,"docs":" The error type used to indicate the end of the input was reached before the\n operation could be completed.\n","sig":null,"attributes":[{"value":"/ The error type used to indicate the end of the input was reached before the","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs","byte_start":13300,"byte_end":13379,"line_start":334,"line_end":334,"column_start":1,"column_end":80}},{"value":"/ operation could be completed.","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs","byte_start":13380,"byte_end":13413,"line_start":335,"line_end":335,"column_start":1,"column_end":34}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs","byte_start":5679,"byte_end":5684,"line_start":124,"line_end":124,"column_start":10,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":6},{"krate":0,"index":7},{"krate":0,"index":8},{"krate":0,"index":9},{"krate":0,"index":10},{"krate":0,"index":14},{"krate":0,"index":18}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs","byte_start":8252,"byte_end":8257,"line_start":190,"line_end":190,"column_start":39,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":22}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs","byte_start":8485,"byte_end":8490,"line_start":198,"line_end":198,"column_start":39,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":26}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs","byte_start":10246,"byte_end":10252,"line_start":252,"line_end":252,"column_start":10,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":35},{"krate":0,"index":36},{"krate":0,"index":37},{"krate":0,"index":39},{"krate":0,"index":40},{"krate":0,"index":41},{"krate":0,"index":42},{"krate":0,"index":44},{"krate":0,"index":45}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Inherent","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs","byte_start":13708,"byte_end":13713,"line_start":348,"line_end":348,"column_start":14,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":50},{"krate":0,"index":51},{"krate":0,"index":52},{"krate":0,"index":54},{"krate":0,"index":55},{"krate":0,"index":56},{"krate":0,"index":57}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs","byte_start":5679,"byte_end":5684,"line_start":124,"line_end":124,"column_start":10,"column_end":15},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":58},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs","byte_start":8252,"byte_end":8257,"line_start":190,"line_end":190,"column_start":39,"column_end":44},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":58},"to":{"krate":1,"index":1653}},{"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs","byte_start":8485,"byte_end":8490,"line_start":198,"line_end":198,"column_start":39,"column_end":44},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":58},"to":{"krate":1,"index":1653}},{"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs","byte_start":10246,"byte_end":10252,"line_start":252,"line_end":252,"column_start":10,"column_end":16},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":74},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.6.2/src/untrusted.rs","byte_start":13708,"byte_end":13713,"line_start":348,"line_end":348,"column_start":14,"column_end":19},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":95},"to":{"krate":4294967295,"index":4294967295}}]}