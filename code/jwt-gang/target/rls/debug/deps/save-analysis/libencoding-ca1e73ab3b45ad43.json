{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33","program":"/home/mich/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","encoding","/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-Cembed-bitcode=no","-C","debuginfo=2","-C","metadata=ca1e73ab3b45ad43","-C","extra-filename=-ca1e73ab3b45ad43","--out-dir","/home/mich/School/smartapp/code/jwt-gang/target/rls/debug/deps","-L","dependency=/home/mich/School/smartapp/code/jwt-gang/target/rls/debug/deps","--extern","encoding_index_japanese=/home/mich/School/smartapp/code/jwt-gang/target/rls/debug/deps/libencoding_index_japanese-8e37c0dfaac57a16.rmeta","--extern","encoding_index_korean=/home/mich/School/smartapp/code/jwt-gang/target/rls/debug/deps/libencoding_index_korean-216e732b9d2e0cb5.rmeta","--extern","encoding_index_simpchinese=/home/mich/School/smartapp/code/jwt-gang/target/rls/debug/deps/libencoding_index_simpchinese-90d89e3a760ace65.rmeta","--extern","encoding_index_singlebyte=/home/mich/School/smartapp/code/jwt-gang/target/rls/debug/deps/libencoding_index_singlebyte-68e4b5c09acd2d7d.rmeta","--extern","encoding_index_tradchinese=/home/mich/School/smartapp/code/jwt-gang/target/rls/debug/deps/libencoding_index_tradchinese-6047218928a2d345.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/home/mich/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/mich/School/smartapp/code/jwt-gang/target/rls/debug/deps/libencoding-ca1e73ab3b45ad43.rmeta"},"prelude":{"crate_id":{"name":"encoding","disambiguator":[17793833833843397095,6243423928181354225]},"crate_root":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src","external_crates":[{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[18437716656233032650,2349106724991734091]}},{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[16851962707842592855,4932765248485690217]}},{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[3049591816127030880,10952373373500329976]}},{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[11587085401131637304,2097967498245787009]}},{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[697141649018154369,16548652339936893370]}},{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[15777040323210795675,4562741973928336648]}},{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[15931681355194650171,7679759071890480571]}},{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[16378405889910241769,9643272937548158260]}},{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","num":9,"id":{"name":"backtrace","disambiguator":[8261542656080474758,5147161130074218296]}},{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","num":10,"id":{"name":"rustc_demangle","disambiguator":[1712641478249352838,12464696676097716113]}},{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","num":11,"id":{"name":"backtrace_sys","disambiguator":[3715598662871405823,1939556143240013170]}},{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","num":12,"id":{"name":"hashbrown","disambiguator":[4641845549064414815,7418938888650694907]}},{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","num":13,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[18127448783747998133,9149995038350923488]}},{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","num":14,"id":{"name":"panic_unwind","disambiguator":[8742225116956546677,8424782546207546390]}},{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","num":15,"id":{"name":"encoding_index_singlebyte","disambiguator":[4970592395300116375,5736071049059979698]}},{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","num":16,"id":{"name":"encoding_index_korean","disambiguator":[11895082027302257870,6111327179636740091]}},{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","num":17,"id":{"name":"encoding_index_japanese","disambiguator":[18067622983738362290,15990657758102671838]}},{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","num":18,"id":{"name":"encoding_index_simpchinese","disambiguator":[10769891773521145380,7325415883004124570]}},{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","num":19,"id":{"name":"encoding_index_tradchinese","disambiguator":[11402454836510179418,15400025371276900046]}}],"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","byte_start":127,"byte_end":10394,"line_start":5,"line_end":267,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":69},"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","byte_start":8960,"byte_end":8970,"line_start":217,"line_end":217,"column_start":23,"column_end":33},"alias_span":null,"name":"CodecError","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":72},"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","byte_start":8972,"byte_end":8982,"line_start":217,"line_end":217,"column_start":35,"column_end":45},"alias_span":null,"name":"ByteWriter","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":80},"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","byte_start":8984,"byte_end":8996,"line_start":217,"line_end":217,"column_start":47,"column_end":59},"alias_span":null,"name":"StringWriter","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":88},"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","byte_start":9020,"byte_end":9030,"line_start":218,"line_end":218,"column_start":23,"column_end":33},"alias_span":null,"name":"RawEncoder","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":93},"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","byte_start":9032,"byte_end":9042,"line_start":218,"line_end":218,"column_start":35,"column_end":45},"alias_span":null,"name":"RawDecoder","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":98},"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","byte_start":9044,"byte_end":9055,"line_start":218,"line_end":218,"column_start":47,"column_end":58},"alias_span":null,"name":"EncodingRef","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":99},"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","byte_start":9057,"byte_end":9065,"line_start":218,"line_end":218,"column_start":60,"column_end":68},"alias_span":null,"name":"Encoding","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":110},"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","byte_start":9089,"byte_end":9104,"line_start":219,"line_end":219,"column_start":23,"column_end":38},"alias_span":null,"name":"EncoderTrapFunc","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":111},"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","byte_start":9106,"byte_end":9121,"line_start":219,"line_end":219,"column_start":40,"column_end":55},"alias_span":null,"name":"DecoderTrapFunc","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":507},"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","byte_start":9123,"byte_end":9134,"line_start":219,"line_end":219,"column_start":57,"column_end":68},"alias_span":null,"name":"DecoderTrap","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":518},"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","byte_start":9158,"byte_end":9169,"line_start":220,"line_end":220,"column_start":23,"column_end":34},"alias_span":null,"name":"EncoderTrap","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":121},"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","byte_start":9171,"byte_end":9177,"line_start":220,"line_end":220,"column_start":36,"column_end":42},"alias_span":null,"name":"decode","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","byte_start":127,"byte_end":10394,"line_start":5,"line_end":267,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":6},{"krate":0,"index":7},{"krate":0,"index":8},{"krate":0,"index":9},{"krate":0,"index":10},{"krate":0,"index":11},{"krate":0,"index":12},{"krate":0,"index":13},{"krate":0,"index":14},{"krate":0,"index":15},{"krate":0,"index":16},{"krate":0,"index":17},{"krate":0,"index":18},{"krate":0,"index":19},{"krate":0,"index":20},{"krate":0,"index":21},{"krate":0,"index":67},{"krate":0,"index":126},{"krate":0,"index":490},{"krate":0,"index":501}],"decl_id":null,"docs":" # Encoding 0.2.33","sig":null,"attributes":[{"value":"! # Encoding 0.2.33","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","byte_start":127,"byte_end":148,"line_start":5,"line_end":5,"column_start":1,"column_end":22}},{"value":"!","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","byte_start":149,"byte_end":152,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"! Character encoding support for Rust. (also known as `rust-encoding`)","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","byte_start":153,"byte_end":225,"line_start":7,"line_end":7,"column_start":1,"column_end":73}},{"value":"! It is based on [WHATWG Encoding Standard](http://encoding.spec.whatwg.org/),","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","byte_start":226,"byte_end":306,"line_start":8,"line_end":8,"column_start":1,"column_end":81}},{"value":"! and also provides an advanced interface for error detection and recovery.","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","byte_start":307,"byte_end":384,"line_start":9,"line_end":9,"column_start":1,"column_end":78}},{"value":"!","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","byte_start":385,"byte_end":388,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"! ## Usage","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","byte_start":389,"byte_end":401,"line_start":11,"line_end":11,"column_start":1,"column_end":13}},{"value":"!","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","byte_start":402,"byte_end":405,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"! Put this in your `Cargo.toml`:","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","byte_start":406,"byte_end":440,"line_start":13,"line_end":13,"column_start":1,"column_end":35}},{"value":"!","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","byte_start":441,"byte_end":444,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"! ```toml","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","byte_start":445,"byte_end":456,"line_start":15,"line_end":15,"column_start":1,"column_end":12}},{"value":"! [dependencies]","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","byte_start":457,"byte_end":475,"line_start":16,"line_end":16,"column_start":1,"column_end":19}},{"value":"! encoding = \"0.2\"","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","byte_start":476,"byte_end":496,"line_start":17,"line_end":17,"column_start":1,"column_end":21}},{"value":"! ```","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","byte_start":497,"byte_end":504,"line_start":18,"line_end":18,"column_start":1,"column_end":8}},{"value":"!","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","byte_start":505,"byte_end":508,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"! Then put this in your crate root:","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","byte_start":509,"byte_end":546,"line_start":20,"line_end":20,"column_start":1,"column_end":38}},{"value":"!","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","byte_start":547,"byte_end":550,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"! ```rust","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","byte_start":551,"byte_end":562,"line_start":22,"line_end":22,"column_start":1,"column_end":12}},{"value":"! extern crate encoding;","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","byte_start":563,"byte_end":589,"line_start":23,"line_end":23,"column_start":1,"column_end":27}},{"value":"! ```","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","byte_start":590,"byte_end":597,"line_start":24,"line_end":24,"column_start":1,"column_end":8}},{"value":"!","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","byte_start":598,"byte_end":601,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"! ## Overview","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","byte_start":602,"byte_end":617,"line_start":26,"line_end":26,"column_start":1,"column_end":16}},{"value":"!","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","byte_start":618,"byte_end":621,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"! To encode a string:","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","byte_start":622,"byte_end":645,"line_start":28,"line_end":28,"column_start":1,"column_end":24}},{"value":"!","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","byte_start":646,"byte_end":649,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"! ~~~~ {.rust}","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","byte_start":650,"byte_end":666,"line_start":30,"line_end":30,"column_start":1,"column_end":17}},{"value":"! use encoding::{Encoding, EncoderTrap};","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","byte_start":667,"byte_end":709,"line_start":31,"line_end":31,"column_start":1,"column_end":43}},{"value":"! use encoding::all::ISO_8859_1;","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","byte_start":710,"byte_end":744,"line_start":32,"line_end":32,"column_start":1,"column_end":35}},{"value":"!","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","byte_start":745,"byte_end":748,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"! assert_eq!(ISO_8859_1.encode(\"caf\\u{e9}\", EncoderTrap::Strict),","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","byte_start":749,"byte_end":816,"line_start":34,"line_end":34,"column_start":1,"column_end":68}},{"value":"!            Ok(vec![99,97,102,233]));","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","byte_start":817,"byte_end":857,"line_start":35,"line_end":35,"column_start":1,"column_end":41}},{"value":"! ~~~~","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","byte_start":858,"byte_end":866,"line_start":36,"line_end":36,"column_start":1,"column_end":9}},{"value":"!","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","byte_start":867,"byte_end":870,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"! To encode a string with unrepresentable characters:","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","byte_start":871,"byte_end":926,"line_start":38,"line_end":38,"column_start":1,"column_end":56}},{"value":"!","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","byte_start":927,"byte_end":930,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"! ~~~~ {.rust}","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","byte_start":931,"byte_end":947,"line_start":40,"line_end":40,"column_start":1,"column_end":17}},{"value":"! use encoding::{Encoding, EncoderTrap};","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","byte_start":948,"byte_end":990,"line_start":41,"line_end":41,"column_start":1,"column_end":43}},{"value":"! use encoding::all::ISO_8859_2;","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","byte_start":991,"byte_end":1025,"line_start":42,"line_end":42,"column_start":1,"column_end":35}},{"value":"!","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","byte_start":1026,"byte_end":1029,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"! assert!(ISO_8859_2.encode(\"Acme\\u{a9}\", EncoderTrap::Strict).is_err());","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","byte_start":1030,"byte_end":1105,"line_start":44,"line_end":44,"column_start":1,"column_end":76}},{"value":"! assert_eq!(ISO_8859_2.encode(\"Acme\\u{a9}\", EncoderTrap::Replace),","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","byte_start":1106,"byte_end":1175,"line_start":45,"line_end":45,"column_start":1,"column_end":70}},{"value":"!            Ok(vec![65,99,109,101,63]));","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","byte_start":1176,"byte_end":1219,"line_start":46,"line_end":46,"column_start":1,"column_end":44}},{"value":"! assert_eq!(ISO_8859_2.encode(\"Acme\\u{a9}\", EncoderTrap::Ignore),","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","byte_start":1220,"byte_end":1288,"line_start":47,"line_end":47,"column_start":1,"column_end":69}},{"value":"!            Ok(vec![65,99,109,101]));","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","byte_start":1289,"byte_end":1329,"line_start":48,"line_end":48,"column_start":1,"column_end":41}},{"value":"! assert_eq!(ISO_8859_2.encode(\"Acme\\u{a9}\", EncoderTrap::NcrEscape),","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","byte_start":1330,"byte_end":1401,"line_start":49,"line_end":49,"column_start":1,"column_end":72}},{"value":"!            Ok(vec![65,99,109,101,38,35,49,54,57,59]));","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","byte_start":1402,"byte_end":1460,"line_start":50,"line_end":50,"column_start":1,"column_end":59}},{"value":"! ~~~~","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","byte_start":1461,"byte_end":1469,"line_start":51,"line_end":51,"column_start":1,"column_end":9}},{"value":"!","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","byte_start":1470,"byte_end":1473,"line_start":52,"line_end":52,"column_start":1,"column_end":4}},{"value":"! To decode a byte sequence:","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","byte_start":1474,"byte_end":1504,"line_start":53,"line_end":53,"column_start":1,"column_end":31}},{"value":"!","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","byte_start":1505,"byte_end":1508,"line_start":54,"line_end":54,"column_start":1,"column_end":4}},{"value":"! ~~~~ {.rust}","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","byte_start":1509,"byte_end":1525,"line_start":55,"line_end":55,"column_start":1,"column_end":17}},{"value":"! use encoding::{Encoding, DecoderTrap};","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","byte_start":1526,"byte_end":1568,"line_start":56,"line_end":56,"column_start":1,"column_end":43}},{"value":"! use encoding::all::ISO_8859_1;","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","byte_start":1569,"byte_end":1603,"line_start":57,"line_end":57,"column_start":1,"column_end":35}},{"value":"!","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","byte_start":1604,"byte_end":1607,"line_start":58,"line_end":58,"column_start":1,"column_end":4}},{"value":"! assert_eq!(ISO_8859_1.decode(&[99,97,102,233], DecoderTrap::Strict),","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","byte_start":1608,"byte_end":1680,"line_start":59,"line_end":59,"column_start":1,"column_end":73}},{"value":"!            Ok(\"caf\\u{e9}\".to_string()));","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","byte_start":1681,"byte_end":1725,"line_start":60,"line_end":60,"column_start":1,"column_end":45}},{"value":"! ~~~~","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","byte_start":1726,"byte_end":1734,"line_start":61,"line_end":61,"column_start":1,"column_end":9}},{"value":"!","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","byte_start":1735,"byte_end":1738,"line_start":62,"line_end":62,"column_start":1,"column_end":4}},{"value":"! To decode a byte sequence with invalid sequences:","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","byte_start":1739,"byte_end":1792,"line_start":63,"line_end":63,"column_start":1,"column_end":54}},{"value":"!","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","byte_start":1793,"byte_end":1796,"line_start":64,"line_end":64,"column_start":1,"column_end":4}},{"value":"! ~~~~ {.rust}","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","byte_start":1797,"byte_end":1813,"line_start":65,"line_end":65,"column_start":1,"column_end":17}},{"value":"! use encoding::{Encoding, DecoderTrap};","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","byte_start":1814,"byte_end":1856,"line_start":66,"line_end":66,"column_start":1,"column_end":43}},{"value":"! use encoding::all::ISO_8859_6;","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","byte_start":1857,"byte_end":1891,"line_start":67,"line_end":67,"column_start":1,"column_end":35}},{"value":"!","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","byte_start":1892,"byte_end":1895,"line_start":68,"line_end":68,"column_start":1,"column_end":4}},{"value":"! assert!(ISO_8859_6.decode(&[65,99,109,101,169], DecoderTrap::Strict).is_err());","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","byte_start":1896,"byte_end":1979,"line_start":69,"line_end":69,"column_start":1,"column_end":84}},{"value":"! assert_eq!(ISO_8859_6.decode(&[65,99,109,101,169], DecoderTrap::Replace),","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","byte_start":1980,"byte_end":2057,"line_start":70,"line_end":70,"column_start":1,"column_end":78}},{"value":"!            Ok(\"Acme\\u{fffd}\".to_string()));","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","byte_start":2058,"byte_end":2105,"line_start":71,"line_end":71,"column_start":1,"column_end":48}},{"value":"! assert_eq!(ISO_8859_6.decode(&[65,99,109,101,169], DecoderTrap::Ignore),","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","byte_start":2106,"byte_end":2182,"line_start":72,"line_end":72,"column_start":1,"column_end":77}},{"value":"!            Ok(\"Acme\".to_string()));","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","byte_start":2183,"byte_end":2222,"line_start":73,"line_end":73,"column_start":1,"column_end":40}},{"value":"! ~~~~","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","byte_start":2223,"byte_end":2231,"line_start":74,"line_end":74,"column_start":1,"column_end":9}},{"value":"!","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","byte_start":2232,"byte_end":2235,"line_start":75,"line_end":75,"column_start":1,"column_end":4}},{"value":"! To encode or decode the input into the already allocated buffer:","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","byte_start":2236,"byte_end":2304,"line_start":76,"line_end":76,"column_start":1,"column_end":69}},{"value":"!","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","byte_start":2305,"byte_end":2308,"line_start":77,"line_end":77,"column_start":1,"column_end":4}},{"value":"! ~~~~ {.rust}","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","byte_start":2309,"byte_end":2325,"line_start":78,"line_end":78,"column_start":1,"column_end":17}},{"value":"! use encoding::{Encoding, EncoderTrap, DecoderTrap};","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","byte_start":2326,"byte_end":2381,"line_start":79,"line_end":79,"column_start":1,"column_end":56}},{"value":"! use encoding::all::{ISO_8859_2, ISO_8859_6};","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","byte_start":2382,"byte_end":2430,"line_start":80,"line_end":80,"column_start":1,"column_end":49}},{"value":"!","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","byte_start":2431,"byte_end":2434,"line_start":81,"line_end":81,"column_start":1,"column_end":4}},{"value":"! let mut bytes = Vec::new();","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","byte_start":2435,"byte_end":2466,"line_start":82,"line_end":82,"column_start":1,"column_end":32}},{"value":"! let mut chars = String::new();","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","byte_start":2467,"byte_end":2501,"line_start":83,"line_end":83,"column_start":1,"column_end":35}},{"value":"!","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","byte_start":2502,"byte_end":2505,"line_start":84,"line_end":84,"column_start":1,"column_end":4}},{"value":"! assert!(ISO_8859_2.encode_to(\"Acme\\u{a9}\", EncoderTrap::Ignore, &mut bytes).is_ok());","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","byte_start":2506,"byte_end":2595,"line_start":85,"line_end":85,"column_start":1,"column_end":90}},{"value":"! assert!(ISO_8859_6.decode_to(&[65,99,109,101,169], DecoderTrap::Replace, &mut chars).is_ok());","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","byte_start":2596,"byte_end":2694,"line_start":86,"line_end":86,"column_start":1,"column_end":99}},{"value":"!","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","byte_start":2695,"byte_end":2698,"line_start":87,"line_end":87,"column_start":1,"column_end":4}},{"value":"! assert_eq!(bytes, [65,99,109,101]);","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","byte_start":2699,"byte_end":2738,"line_start":88,"line_end":88,"column_start":1,"column_end":40}},{"value":"! assert_eq!(chars, \"Acme\\u{fffd}\");","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","byte_start":2739,"byte_end":2777,"line_start":89,"line_end":89,"column_start":1,"column_end":39}},{"value":"! ~~~~","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","byte_start":2778,"byte_end":2786,"line_start":90,"line_end":90,"column_start":1,"column_end":9}},{"value":"!","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","byte_start":2787,"byte_end":2790,"line_start":91,"line_end":91,"column_start":1,"column_end":4}},{"value":"! A practical example of custom encoder traps:","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","byte_start":2791,"byte_end":2839,"line_start":92,"line_end":92,"column_start":1,"column_end":49}},{"value":"!","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","byte_start":2840,"byte_end":2843,"line_start":93,"line_end":93,"column_start":1,"column_end":4}},{"value":"! ~~~~ {.rust}","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","byte_start":2844,"byte_end":2860,"line_start":94,"line_end":94,"column_start":1,"column_end":17}},{"value":"! use encoding::{Encoding, ByteWriter, EncoderTrap, DecoderTrap};","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","byte_start":2861,"byte_end":2928,"line_start":95,"line_end":95,"column_start":1,"column_end":68}},{"value":"! use encoding::types::RawEncoder;","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","byte_start":2929,"byte_end":2965,"line_start":96,"line_end":96,"column_start":1,"column_end":37}},{"value":"! use encoding::all::ASCII;","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","byte_start":2966,"byte_end":2995,"line_start":97,"line_end":97,"column_start":1,"column_end":30}},{"value":"!","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","byte_start":2996,"byte_end":2999,"line_start":98,"line_end":98,"column_start":1,"column_end":4}},{"value":"! // hexadecimal numeric character reference replacement","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","byte_start":3000,"byte_end":3058,"line_start":99,"line_end":99,"column_start":1,"column_end":59}},{"value":"! fn hex_ncr_escape(_encoder: &mut RawEncoder, input: &str, output: &mut ByteWriter) -> bool {","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","byte_start":3059,"byte_end":3155,"line_start":100,"line_end":100,"column_start":1,"column_end":97}},{"value":"!     let escapes: Vec<String> =","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","byte_start":3156,"byte_end":3190,"line_start":101,"line_end":101,"column_start":1,"column_end":35}},{"value":"!         input.chars().map(|ch| format!(\"&#x{:x};\", ch as isize)).collect();","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","byte_start":3191,"byte_end":3270,"line_start":102,"line_end":102,"column_start":1,"column_end":80}},{"value":"!     let escapes = escapes.concat();","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","byte_start":3271,"byte_end":3310,"line_start":103,"line_end":103,"column_start":1,"column_end":40}},{"value":"!     output.write_bytes(escapes.as_bytes());","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","byte_start":3311,"byte_end":3358,"line_start":104,"line_end":104,"column_start":1,"column_end":48}},{"value":"!     true","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","byte_start":3359,"byte_end":3371,"line_start":105,"line_end":105,"column_start":1,"column_end":13}},{"value":"! }","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","byte_start":3372,"byte_end":3377,"line_start":106,"line_end":106,"column_start":1,"column_end":6}},{"value":"! static HEX_NCR_ESCAPE: EncoderTrap = EncoderTrap::Call(hex_ncr_escape);","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","byte_start":3378,"byte_end":3453,"line_start":107,"line_end":107,"column_start":1,"column_end":76}},{"value":"!","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","byte_start":3454,"byte_end":3457,"line_start":108,"line_end":108,"column_start":1,"column_end":4}},{"value":"! let orig = \"Hello, 世界!\".to_string();","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","byte_start":3458,"byte_end":3502,"line_start":109,"line_end":109,"column_start":1,"column_end":41}},{"value":"! let encoded = ASCII.encode(&orig, HEX_NCR_ESCAPE).unwrap();","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","byte_start":3503,"byte_end":3566,"line_start":110,"line_end":110,"column_start":1,"column_end":64}},{"value":"! assert_eq!(ASCII.decode(&encoded, DecoderTrap::Strict),","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","byte_start":3567,"byte_end":3626,"line_start":111,"line_end":111,"column_start":1,"column_end":60}},{"value":"!            Ok(\"Hello, &#x4e16;&#x754c;!\".to_string()));","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","byte_start":3627,"byte_end":3686,"line_start":112,"line_end":112,"column_start":1,"column_end":60}},{"value":"! ~~~~","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","byte_start":3687,"byte_end":3695,"line_start":113,"line_end":113,"column_start":1,"column_end":9}},{"value":"!","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","byte_start":3696,"byte_end":3699,"line_start":114,"line_end":114,"column_start":1,"column_end":4}},{"value":"! Getting the encoding from the string label, as specified in WHATWG Encoding standard:","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","byte_start":3700,"byte_end":3789,"line_start":115,"line_end":115,"column_start":1,"column_end":90}},{"value":"!","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","byte_start":3790,"byte_end":3793,"line_start":116,"line_end":116,"column_start":1,"column_end":4}},{"value":"! ~~~~ {.rust}","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","byte_start":3794,"byte_end":3810,"line_start":117,"line_end":117,"column_start":1,"column_end":17}},{"value":"! use encoding::{Encoding, DecoderTrap};","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","byte_start":3811,"byte_end":3853,"line_start":118,"line_end":118,"column_start":1,"column_end":43}},{"value":"! use encoding::label::encoding_from_whatwg_label;","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","byte_start":3854,"byte_end":3906,"line_start":119,"line_end":119,"column_start":1,"column_end":53}},{"value":"! use encoding::all::WINDOWS_949;","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","byte_start":3907,"byte_end":3942,"line_start":120,"line_end":120,"column_start":1,"column_end":36}},{"value":"!","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","byte_start":3943,"byte_end":3946,"line_start":121,"line_end":121,"column_start":1,"column_end":4}},{"value":"! let euckr = encoding_from_whatwg_label(\"euc-kr\").unwrap();","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","byte_start":3947,"byte_end":4009,"line_start":122,"line_end":122,"column_start":1,"column_end":63}},{"value":"! assert_eq!(euckr.name(), \"windows-949\");","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","byte_start":4010,"byte_end":4054,"line_start":123,"line_end":123,"column_start":1,"column_end":45}},{"value":"! assert_eq!(euckr.whatwg_name(), Some(\"euc-kr\")); // for the sake of compatibility","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","byte_start":4055,"byte_end":4140,"line_start":124,"line_end":124,"column_start":1,"column_end":86}},{"value":"! let broken = &[0xbf, 0xec, 0xbf, 0xcd, 0xff, 0xbe, 0xd3];","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","byte_start":4141,"byte_end":4202,"line_start":125,"line_end":125,"column_start":1,"column_end":62}},{"value":"! assert_eq!(euckr.decode(broken, DecoderTrap::Replace),","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","byte_start":4203,"byte_end":4261,"line_start":126,"line_end":126,"column_start":1,"column_end":59}},{"value":"!            Ok(\"\\u{c6b0}\\u{c640}\\u{fffd}\\u{c559}\".to_string()));","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","byte_start":4262,"byte_end":4329,"line_start":127,"line_end":127,"column_start":1,"column_end":68}},{"value":"!","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","byte_start":4330,"byte_end":4333,"line_start":128,"line_end":128,"column_start":1,"column_end":4}},{"value":"! // corresponding Encoding native API:","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","byte_start":4334,"byte_end":4375,"line_start":129,"line_end":129,"column_start":1,"column_end":42}},{"value":"! assert_eq!(WINDOWS_949.decode(broken, DecoderTrap::Replace),","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","byte_start":4376,"byte_end":4440,"line_start":130,"line_end":130,"column_start":1,"column_end":65}},{"value":"!            Ok(\"\\u{c6b0}\\u{c640}\\u{fffd}\\u{c559}\".to_string()));","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","byte_start":4441,"byte_end":4508,"line_start":131,"line_end":131,"column_start":1,"column_end":68}},{"value":"! ~~~~","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","byte_start":4509,"byte_end":4517,"line_start":132,"line_end":132,"column_start":1,"column_end":9}},{"value":"!","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","byte_start":4518,"byte_end":4521,"line_start":133,"line_end":133,"column_start":1,"column_end":4}},{"value":"! ## Types and Stuffs","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","byte_start":4522,"byte_end":4545,"line_start":134,"line_end":134,"column_start":1,"column_end":24}},{"value":"!","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","byte_start":4546,"byte_end":4549,"line_start":135,"line_end":135,"column_start":1,"column_end":4}},{"value":"! There are three main entry points to Encoding.","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","byte_start":4550,"byte_end":4600,"line_start":136,"line_end":136,"column_start":1,"column_end":51}},{"value":"!","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","byte_start":4601,"byte_end":4604,"line_start":137,"line_end":137,"column_start":1,"column_end":4}},{"value":"! **`Encoding`** is a single character encoding.","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","byte_start":4605,"byte_end":4655,"line_start":138,"line_end":138,"column_start":1,"column_end":51}},{"value":"! It contains `encode` and `decode` methods for converting `String` to `Vec<u8>` and vice versa.","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","byte_start":4656,"byte_end":4754,"line_start":139,"line_end":139,"column_start":1,"column_end":99}},{"value":"! For the error handling, they receive **traps** (`EncoderTrap` and `DecoderTrap` respectively)","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","byte_start":4755,"byte_end":4852,"line_start":140,"line_end":140,"column_start":1,"column_end":98}},{"value":"! which replace any error with some string (e.g. `U+FFFD`) or sequence (e.g. `?`).","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","byte_start":4853,"byte_end":4937,"line_start":141,"line_end":141,"column_start":1,"column_end":85}},{"value":"! You can also use `EncoderTrap::Strict` and `DecoderTrap::Strict` traps to stop on an error.","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","byte_start":4938,"byte_end":5033,"line_start":142,"line_end":142,"column_start":1,"column_end":96}},{"value":"!","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","byte_start":5034,"byte_end":5037,"line_start":143,"line_end":143,"column_start":1,"column_end":4}},{"value":"! There are two ways to get `Encoding`:","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","byte_start":5038,"byte_end":5079,"line_start":144,"line_end":144,"column_start":1,"column_end":42}},{"value":"!","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","byte_start":5080,"byte_end":5083,"line_start":145,"line_end":145,"column_start":1,"column_end":4}},{"value":"! * `encoding::all` has static items for every supported encoding.","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","byte_start":5084,"byte_end":5152,"line_start":146,"line_end":146,"column_start":1,"column_end":69}},{"value":"!   You should use them when the encoding would not change or only handful of them are required.","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","byte_start":5153,"byte_end":5251,"line_start":147,"line_end":147,"column_start":1,"column_end":99}},{"value":"!   Combined with link-time optimization, any unused encoding would be discarded from the binary.","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","byte_start":5252,"byte_end":5351,"line_start":148,"line_end":148,"column_start":1,"column_end":100}},{"value":"!","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","byte_start":5352,"byte_end":5355,"line_start":149,"line_end":149,"column_start":1,"column_end":4}},{"value":"! * `encoding::label` has functions to dynamically get an encoding from given string (\"label\").","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","byte_start":5356,"byte_end":5453,"line_start":150,"line_end":150,"column_start":1,"column_end":98}},{"value":"!   They will return a static reference to the encoding,","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","byte_start":5454,"byte_end":5512,"line_start":151,"line_end":151,"column_start":1,"column_end":59}},{"value":"!   which type is also known as `EncodingRef`.","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","byte_start":5513,"byte_end":5561,"line_start":152,"line_end":152,"column_start":1,"column_end":49}},{"value":"!   It is useful when a list of required encodings is not available in advance,","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","byte_start":5562,"byte_end":5643,"line_start":153,"line_end":153,"column_start":1,"column_end":82}},{"value":"!   but it will result in the larger binary and missed optimization opportunities.","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","byte_start":5644,"byte_end":5728,"line_start":154,"line_end":154,"column_start":1,"column_end":85}},{"value":"!","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","byte_start":5729,"byte_end":5732,"line_start":155,"line_end":155,"column_start":1,"column_end":4}},{"value":"! **`RawEncoder`** is an experimental incremental encoder.","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","byte_start":5733,"byte_end":5793,"line_start":156,"line_end":156,"column_start":1,"column_end":61}},{"value":"! At each step of `raw_feed`, it receives a slice of string","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","byte_start":5794,"byte_end":5855,"line_start":157,"line_end":157,"column_start":1,"column_end":62}},{"value":"! and emits any encoded bytes to a generic `ByteWriter` (normally `Vec<u8>`).","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","byte_start":5856,"byte_end":5935,"line_start":158,"line_end":158,"column_start":1,"column_end":80}},{"value":"! It will stop at the first error if any, and would return a `CodecError` struct in that case.","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","byte_start":5936,"byte_end":6032,"line_start":159,"line_end":159,"column_start":1,"column_end":97}},{"value":"! The caller is responsible for calling `raw_finish` at the end of encoding process.","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","byte_start":6033,"byte_end":6119,"line_start":160,"line_end":160,"column_start":1,"column_end":87}},{"value":"!","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","byte_start":6120,"byte_end":6123,"line_start":161,"line_end":161,"column_start":1,"column_end":4}},{"value":"! **`RawDecoder`** is an experimental incremental decoder.","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","byte_start":6124,"byte_end":6184,"line_start":162,"line_end":162,"column_start":1,"column_end":61}},{"value":"! At each step of `raw_feed`, it receives a slice of byte sequence","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","byte_start":6185,"byte_end":6253,"line_start":163,"line_end":163,"column_start":1,"column_end":69}},{"value":"! and emits any decoded characters to a generic `StringWriter` (normally `String`).","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","byte_start":6254,"byte_end":6339,"line_start":164,"line_end":164,"column_start":1,"column_end":86}},{"value":"! Otherwise it is identical to `RawEncoder`s.","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","byte_start":6340,"byte_end":6387,"line_start":165,"line_end":165,"column_start":1,"column_end":48}},{"value":"!","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","byte_start":6388,"byte_end":6391,"line_start":166,"line_end":166,"column_start":1,"column_end":4}},{"value":"! One should prefer `Encoding::{encode,decode}` as a primary interface.","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","byte_start":6392,"byte_end":6465,"line_start":167,"line_end":167,"column_start":1,"column_end":74}},{"value":"! `RawEncoder` and `RawDecoder` is experimental and can change substantially.","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","byte_start":6466,"byte_end":6545,"line_start":168,"line_end":168,"column_start":1,"column_end":80}},{"value":"! See the additional documents on `encoding::types` module for more information on them.","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","byte_start":6546,"byte_end":6636,"line_start":169,"line_end":169,"column_start":1,"column_end":91}},{"value":"!","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","byte_start":6637,"byte_end":6640,"line_start":170,"line_end":170,"column_start":1,"column_end":4}},{"value":"! ## Supported Encodings","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","byte_start":6641,"byte_end":6667,"line_start":171,"line_end":171,"column_start":1,"column_end":27}},{"value":"!","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","byte_start":6668,"byte_end":6671,"line_start":172,"line_end":172,"column_start":1,"column_end":4}},{"value":"! Encoding covers all encodings specified by WHATWG Encoding Standard and some more:","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","byte_start":6672,"byte_end":6758,"line_start":173,"line_end":173,"column_start":1,"column_end":87}},{"value":"!","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","byte_start":6759,"byte_end":6762,"line_start":174,"line_end":174,"column_start":1,"column_end":4}},{"value":"! * 7-bit strict ASCII (`ascii`)","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","byte_start":6763,"byte_end":6797,"line_start":175,"line_end":175,"column_start":1,"column_end":35}},{"value":"! * UTF-8 (`utf-8`)","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","byte_start":6798,"byte_end":6819,"line_start":176,"line_end":176,"column_start":1,"column_end":22}},{"value":"! * UTF-16 in little endian (`utf-16` or `utf-16le`) and big endian (`utf-16be`)","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","byte_start":6820,"byte_end":6902,"line_start":177,"line_end":177,"column_start":1,"column_end":83}},{"value":"! * All single byte encoding in WHATWG Encoding Standard:","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","byte_start":6903,"byte_end":6962,"line_start":178,"line_end":178,"column_start":1,"column_end":60}},{"value":"!     * IBM code page 866","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","byte_start":6963,"byte_end":6990,"line_start":179,"line_end":179,"column_start":1,"column_end":28}},{"value":"!     * ISO 8859-{2,3,4,5,6,7,8,10,13,14,15,16}","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","byte_start":6991,"byte_end":7040,"line_start":180,"line_end":180,"column_start":1,"column_end":50}},{"value":"!     * KOI8-R, KOI8-U","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","byte_start":7041,"byte_end":7065,"line_start":181,"line_end":181,"column_start":1,"column_end":25}},{"value":"!     * MacRoman (`macintosh`), Macintosh Cyrillic encoding (`x-mac-cyrillic`)","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","byte_start":7066,"byte_end":7146,"line_start":182,"line_end":182,"column_start":1,"column_end":81}},{"value":"!     * Windows code pages 874, 1250, 1251, 1252 (instead of ISO 8859-1), 1253,","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","byte_start":7147,"byte_end":7228,"line_start":183,"line_end":183,"column_start":1,"column_end":82}},{"value":"!       1254 (instead of ISO 8859-9), 1255, 1256, 1257, 1258","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","byte_start":7229,"byte_end":7291,"line_start":184,"line_end":184,"column_start":1,"column_end":63}},{"value":"! * All multi byte encodings in WHATWG Encoding Standard:","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","byte_start":7292,"byte_end":7351,"line_start":185,"line_end":185,"column_start":1,"column_end":60}},{"value":"!     * Windows code page 949 (`euc-kr`, since the strict EUC-KR is hardly used)","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","byte_start":7352,"byte_end":7434,"line_start":186,"line_end":186,"column_start":1,"column_end":83}},{"value":"!     * EUC-JP and Windows code page 932 (`shift_jis`,","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","byte_start":7435,"byte_end":7491,"line_start":187,"line_end":187,"column_start":1,"column_end":57}},{"value":"!       since it's the most widespread extension to Shift_JIS)","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","byte_start":7492,"byte_end":7556,"line_start":188,"line_end":188,"column_start":1,"column_end":65}},{"value":"!     * ISO-2022-JP with asymmetric JIS X 0212 support","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","byte_start":7557,"byte_end":7613,"line_start":189,"line_end":189,"column_start":1,"column_end":57}},{"value":"!       (Note: this is not yet up to date to the current standard)","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","byte_start":7614,"byte_end":7682,"line_start":190,"line_end":190,"column_start":1,"column_end":69}},{"value":"!     * GBK","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","byte_start":7683,"byte_end":7696,"line_start":191,"line_end":191,"column_start":1,"column_end":14}},{"value":"!     * GB 18030","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","byte_start":7697,"byte_end":7715,"line_start":192,"line_end":192,"column_start":1,"column_end":19}},{"value":"!     * Big5-2003 with HKSCS-2008 extensions","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","byte_start":7716,"byte_end":7762,"line_start":193,"line_end":193,"column_start":1,"column_end":47}},{"value":"! * Encodings that were originally specified by WHATWG Encoding Standard:","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","byte_start":7763,"byte_end":7838,"line_start":194,"line_end":194,"column_start":1,"column_end":76}},{"value":"!     * HZ","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","byte_start":7839,"byte_end":7851,"line_start":195,"line_end":195,"column_start":1,"column_end":13}},{"value":"! * ISO 8859-1 (distinct from Windows code page 1252)","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","byte_start":7852,"byte_end":7907,"line_start":196,"line_end":196,"column_start":1,"column_end":56}},{"value":"!","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","byte_start":7908,"byte_end":7911,"line_start":197,"line_end":197,"column_start":1,"column_end":4}},{"value":"! Parenthesized names refer to the encoding's primary name assigned by WHATWG Encoding Standard.","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","byte_start":7912,"byte_end":8010,"line_start":198,"line_end":198,"column_start":1,"column_end":99}},{"value":"!","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","byte_start":8011,"byte_end":8014,"line_start":199,"line_end":199,"column_start":1,"column_end":4}},{"value":"! Many legacy character encodings lack the proper specification,","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","byte_start":8015,"byte_end":8081,"line_start":200,"line_end":200,"column_start":1,"column_end":67}},{"value":"! and even those that have a specification are highly dependent of the actual implementation.","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","byte_start":8082,"byte_end":8177,"line_start":201,"line_end":201,"column_start":1,"column_end":96}},{"value":"! Consequently one should be careful when picking a desired character encoding.","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","byte_start":8178,"byte_end":8259,"line_start":202,"line_end":202,"column_start":1,"column_end":82}},{"value":"! The only standards reliable in this regard are WHATWG Encoding Standard and","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","byte_start":8260,"byte_end":8339,"line_start":203,"line_end":203,"column_start":1,"column_end":80}},{"value":"! [vendor-provided mappings from the Unicode consortium](http://www.unicode.org/Public/MAPPINGS/).","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","byte_start":8340,"byte_end":8440,"line_start":204,"line_end":204,"column_start":1,"column_end":101}},{"value":"! Whenever in doubt, look at the source code and specifications for detailed explanations.","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","byte_start":8441,"byte_end":8533,"line_start":205,"line_end":205,"column_start":1,"column_end":93}}]},{"kind":"Mod","id":{"krate":0,"index":67},"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/types.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"types","qualname":"::types","value":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/types.rs","parent":null,"children":[{"krate":0,"index":68},{"krate":0,"index":69},{"krate":0,"index":72},{"krate":0,"index":76},{"krate":0,"index":80},{"krate":0,"index":84},{"krate":0,"index":88},{"krate":0,"index":93},{"krate":0,"index":98},{"krate":0,"index":99},{"krate":0,"index":110},{"krate":0,"index":111},{"krate":0,"index":507},{"krate":0,"index":517},{"krate":0,"index":112},{"krate":0,"index":114},{"krate":0,"index":518},{"krate":0,"index":530},{"krate":0,"index":116},{"krate":0,"index":119},{"krate":0,"index":121}],"decl_id":null,"docs":" Interface to the character encoding.","sig":null,"attributes":[{"value":"!\n * Interface to the character encoding.\n *\n * # Raw incremental interface\n *\n * Methods which name starts with `raw_` constitute the raw incremental interface,\n * the lowest-available API for encoders and decoders.\n * This interface divides the entire input to four parts:\n *\n * - **Processed** bytes do not affect the future result.\n * - **Unprocessed** bytes may affect the future result\n *   and can be a part of problematic sequence according to the future input.\n * - **Problematic** byte is the first byte that causes an error condition.\n * - **Remaining** bytes are not yet processed nor read,\n *   so the caller should feed any remaining bytes again.\n *\n * The following figure illustrates an example of successive `raw_feed` calls:\n *\n * ````notrust\n * 1st raw_feed   :2nd raw_feed   :3rd raw_feed\n * ----------+----:---------------:--+--+---------\n *           |    :               :  |  |\n * ----------+----:---------------:--+--+---------\n * processed  unprocessed             |  remaining\n *                               problematic\n * ````\n *\n * Since these parts can span the multiple input sequences to `raw_feed`,\n * `raw_feed` returns two offsets (one optional)\n * with that the caller can track the problematic sequence.\n * The first offset (the first `usize` in the tuple) points to the first unprocessed bytes,\n * or is zero when unprocessed bytes have started before the current call.\n * (The first unprocessed byte can also be at offset 0,\n * which doesn't make a difference for the caller.)\n * The second offset (`upto` field in the `CodecError` struct), if any,\n * points to the first remaining bytes.\n *\n * If the caller needs to recover the error via the problematic sequence,\n * then the caller starts to save the unprocessed bytes when the first offset < the input length,\n * appends any new unprocessed bytes while the first offset is zero,\n * and discards unprocessed bytes when first offset becomes non-zero\n * while saving new unprocessed bytes when the first offset < the input length.\n * Then the caller checks for the error condition\n * and can use the saved unprocessed bytes for error recovery.\n * Alternatively, if the caller only wants to replace the problematic sequence\n * with a fixed string (like U+FFFD),\n * then it can just discard the first sequence and can emit the fixed string on an error.\n * It still has to feed the input bytes starting at the second offset again.\n */","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/types.rs","byte_start":22522,"byte_end":24947,"line_start":5,"line_end":53,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":69},"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/types.rs","byte_start":25036,"byte_end":25046,"line_start":57,"line_end":57,"column_start":12,"column_end":22},"name":"CodecError","qualname":"::types::CodecError","value":"CodecError { upto, cause }","parent":null,"children":[{"krate":0,"index":70},{"krate":0,"index":71}],"decl_id":null,"docs":" Error information from either encoder or decoder.\n","sig":null,"attributes":[{"value":"/ Error information from either encoder or decoder.","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/types.rs","byte_start":24971,"byte_end":25024,"line_start":56,"line_end":56,"column_start":1,"column_end":54}}]},{"kind":"Field","id":{"krate":0,"index":70},"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/types.rs","byte_start":25511,"byte_end":25515,"line_start":64,"line_end":64,"column_start":9,"column_end":13},"name":"upto","qualname":"::types::CodecError::upto","value":"isize","parent":{"krate":0,"index":69},"children":[],"decl_id":null,"docs":" The byte position of the first remaining byte, with respect to the *current* input.\n For the `finish` call, this should be no more than zero (since there is no input).\n It can be negative if the remaining byte is in the prior inputs,\n as long as the remaining byte is not yet processed.\n The caller should feed the bytes starting from this point again\n in order to continue encoding or decoding after an error.\n","sig":null,"attributes":[{"value":"/ The byte position of the first remaining byte, with respect to the *current* input.","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/types.rs","byte_start":25053,"byte_end":25140,"line_start":58,"line_end":58,"column_start":5,"column_end":92}},{"value":"/ For the `finish` call, this should be no more than zero (since there is no input).","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/types.rs","byte_start":25145,"byte_end":25231,"line_start":59,"line_end":59,"column_start":5,"column_end":91}},{"value":"/ It can be negative if the remaining byte is in the prior inputs,","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/types.rs","byte_start":25236,"byte_end":25304,"line_start":60,"line_end":60,"column_start":5,"column_end":73}},{"value":"/ as long as the remaining byte is not yet processed.","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/types.rs","byte_start":25309,"byte_end":25364,"line_start":61,"line_end":61,"column_start":5,"column_end":60}},{"value":"/ The caller should feed the bytes starting from this point again","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/types.rs","byte_start":25369,"byte_end":25436,"line_start":62,"line_end":62,"column_start":5,"column_end":72}},{"value":"/ in order to continue encoding or decoding after an error.","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/types.rs","byte_start":25441,"byte_end":25502,"line_start":63,"line_end":63,"column_start":5,"column_end":66}}]},{"kind":"Field","id":{"krate":0,"index":71},"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/types.rs","byte_start":25577,"byte_end":25582,"line_start":66,"line_end":66,"column_start":9,"column_end":14},"name":"cause","qualname":"::types::CodecError::cause","value":"std::borrow::Cow<'static, str>","parent":{"krate":0,"index":69},"children":[],"decl_id":null,"docs":" A human-readable cause of the error.\n","sig":null,"attributes":[{"value":"/ A human-readable cause of the error.","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/types.rs","byte_start":25528,"byte_end":25568,"line_start":65,"line_end":65,"column_start":5,"column_end":45}}]},{"kind":"Trait","id":{"krate":0,"index":72},"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/types.rs","byte_start":25702,"byte_end":25712,"line_start":70,"line_end":70,"column_start":11,"column_end":21},"name":"ByteWriter","qualname":"::types::ByteWriter","value":"ByteWriter","parent":null,"children":[{"krate":0,"index":73},{"krate":0,"index":74},{"krate":0,"index":75}],"decl_id":null,"docs":" Byte writer used by encoders. In most cases this will be an owned vector of `u8`.\n","sig":null,"attributes":[{"value":"/ Byte writer used by encoders. In most cases this will be an owned vector of `u8`.","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/types.rs","byte_start":25606,"byte_end":25691,"line_start":69,"line_end":69,"column_start":1,"column_end":86}}]},{"kind":"Method","id":{"krate":0,"index":73},"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/types.rs","byte_start":26066,"byte_end":26077,"line_start":77,"line_end":77,"column_start":8,"column_end":19},"name":"writer_hint","qualname":"::types::ByteWriter::writer_hint","value":"pub fn writer_hint(&mut Self, usize)","parent":{"krate":0,"index":72},"children":[],"decl_id":null,"docs":" Hints an expected lower bound on the length (in bytes) of the output\n until the next call to `writer_hint`,\n so that the writer can reserve the memory for writing.\n `RawEncoder`s are recommended but not required to call this method\n with an appropriate estimate.\n By default this method does nothing.\n","sig":null,"attributes":[{"value":"/ Hints an expected lower bound on the length (in bytes) of the output","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/types.rs","byte_start":25719,"byte_end":25791,"line_start":71,"line_end":71,"column_start":5,"column_end":77}},{"value":"/ until the next call to `writer_hint`,","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/types.rs","byte_start":25796,"byte_end":25837,"line_start":72,"line_end":72,"column_start":5,"column_end":46}},{"value":"/ so that the writer can reserve the memory for writing.","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/types.rs","byte_start":25842,"byte_end":25900,"line_start":73,"line_end":73,"column_start":5,"column_end":63}},{"value":"/ `RawEncoder`s are recommended but not required to call this method","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/types.rs","byte_start":25905,"byte_end":25975,"line_start":74,"line_end":74,"column_start":5,"column_end":75}},{"value":"/ with an appropriate estimate.","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/types.rs","byte_start":25980,"byte_end":26013,"line_start":75,"line_end":75,"column_start":5,"column_end":38}},{"value":"/ By default this method does nothing.","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/types.rs","byte_start":26018,"byte_end":26058,"line_start":76,"line_end":76,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":74},"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/types.rs","byte_start":26151,"byte_end":26161,"line_start":80,"line_end":80,"column_start":8,"column_end":18},"name":"write_byte","qualname":"::types::ByteWriter::write_byte","value":"pub fn write_byte(&mut Self, u8)","parent":{"krate":0,"index":72},"children":[],"decl_id":null,"docs":" Writes a single byte.\n","sig":null,"attributes":[{"value":"/ Writes a single byte.","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/types.rs","byte_start":26118,"byte_end":26143,"line_start":79,"line_end":79,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":75},"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/types.rs","byte_start":26223,"byte_end":26234,"line_start":83,"line_end":83,"column_start":8,"column_end":19},"name":"write_bytes","qualname":"::types::ByteWriter::write_bytes","value":"pub fn write_bytes(&mut Self, &[u8])","parent":{"krate":0,"index":72},"children":[],"decl_id":null,"docs":" Writes a number of bytes.\n","sig":null,"attributes":[{"value":"/ Writes a number of bytes.","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/types.rs","byte_start":26186,"byte_end":26215,"line_start":82,"line_end":82,"column_start":5,"column_end":34}}]},{"kind":"Trait","id":{"krate":0,"index":80},"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/types.rs","byte_start":26632,"byte_end":26644,"line_start":101,"line_end":101,"column_start":11,"column_end":23},"name":"StringWriter","qualname":"::types::StringWriter","value":"StringWriter","parent":null,"children":[{"krate":0,"index":81},{"krate":0,"index":82},{"krate":0,"index":83}],"decl_id":null,"docs":" String writer used by decoders. In most cases this will be an owned string.\n","sig":null,"attributes":[{"value":"/ String writer used by decoders. In most cases this will be an owned string.","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/types.rs","byte_start":26542,"byte_end":26621,"line_start":100,"line_end":100,"column_start":1,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":81},"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/types.rs","byte_start":26998,"byte_end":27009,"line_start":108,"line_end":108,"column_start":8,"column_end":19},"name":"writer_hint","qualname":"::types::StringWriter::writer_hint","value":"pub fn writer_hint(&mut Self, usize)","parent":{"krate":0,"index":80},"children":[],"decl_id":null,"docs":" Hints an expected lower bound on the length (in bytes) of the output\n until the next call to `writer_hint`,\n so that the writer can reserve the memory for writing.\n `RawDecoder`s are recommended but not required to call this method\n with an appropriate estimate.\n By default this method does nothing.\n","sig":null,"attributes":[{"value":"/ Hints an expected lower bound on the length (in bytes) of the output","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/types.rs","byte_start":26651,"byte_end":26723,"line_start":102,"line_end":102,"column_start":5,"column_end":77}},{"value":"/ until the next call to `writer_hint`,","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/types.rs","byte_start":26728,"byte_end":26769,"line_start":103,"line_end":103,"column_start":5,"column_end":46}},{"value":"/ so that the writer can reserve the memory for writing.","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/types.rs","byte_start":26774,"byte_end":26832,"line_start":104,"line_end":104,"column_start":5,"column_end":63}},{"value":"/ `RawDecoder`s are recommended but not required to call this method","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/types.rs","byte_start":26837,"byte_end":26907,"line_start":105,"line_end":105,"column_start":5,"column_end":75}},{"value":"/ with an appropriate estimate.","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/types.rs","byte_start":26912,"byte_end":26945,"line_start":106,"line_end":106,"column_start":5,"column_end":38}},{"value":"/ By default this method does nothing.","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/types.rs","byte_start":26950,"byte_end":26990,"line_start":107,"line_end":107,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":82},"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/types.rs","byte_start":27088,"byte_end":27098,"line_start":111,"line_end":111,"column_start":8,"column_end":18},"name":"write_char","qualname":"::types::StringWriter::write_char","value":"pub fn write_char(&mut Self, char)","parent":{"krate":0,"index":80},"children":[],"decl_id":null,"docs":" Writes a single character.\n","sig":null,"attributes":[{"value":"/ Writes a single character.","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/types.rs","byte_start":27050,"byte_end":27080,"line_start":110,"line_end":110,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":83},"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/types.rs","byte_start":27153,"byte_end":27162,"line_start":114,"line_end":114,"column_start":8,"column_end":17},"name":"write_str","qualname":"::types::StringWriter::write_str","value":"pub fn write_str(&mut Self, &str)","parent":{"krate":0,"index":80},"children":[],"decl_id":null,"docs":" Writes a string.\n","sig":null,"attributes":[{"value":"/ Writes a string.","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/types.rs","byte_start":27125,"byte_end":27145,"line_start":113,"line_end":113,"column_start":5,"column_end":25}}]},{"kind":"Trait","id":{"krate":0,"index":88},"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/types.rs","byte_start":27662,"byte_end":27672,"line_start":134,"line_end":134,"column_start":11,"column_end":21},"name":"RawEncoder","qualname":"::types::RawEncoder","value":"RawEncoder: 'static","parent":null,"children":[{"krate":0,"index":89},{"krate":0,"index":90},{"krate":0,"index":91},{"krate":0,"index":92}],"decl_id":null,"docs":" Encoder converting a Unicode string into a byte sequence.\n This is a lower level interface, and normally `Encoding::encode` should be used instead.\n","sig":null,"attributes":[{"value":"/ Encoder converting a Unicode string into a byte sequence.","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/types.rs","byte_start":27497,"byte_end":27558,"line_start":132,"line_end":132,"column_start":1,"column_end":62}},{"value":"/ This is a lower level interface, and normally `Encoding::encode` should be used instead.","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/types.rs","byte_start":27559,"byte_end":27651,"line_start":133,"line_end":133,"column_start":1,"column_end":93}}]},{"kind":"Method","id":{"krate":0,"index":89},"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/types.rs","byte_start":27774,"byte_end":27783,"line_start":136,"line_end":136,"column_start":8,"column_end":17},"name":"from_self","qualname":"::types::RawEncoder::from_self","value":"pub fn from_self(&Self) -> Box<RawEncoder>","parent":{"krate":0,"index":88},"children":[],"decl_id":null,"docs":" Creates a fresh `RawEncoder` instance which parameters are same as `self`.\n","sig":null,"attributes":[{"value":"/ Creates a fresh `RawEncoder` instance which parameters are same as `self`.","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/types.rs","byte_start":27688,"byte_end":27766,"line_start":135,"line_end":135,"column_start":5,"column_end":83}}]},{"kind":"Method","id":{"krate":0,"index":90},"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/types.rs","byte_start":27968,"byte_end":27987,"line_start":140,"line_end":140,"column_start":8,"column_end":27},"name":"is_ascii_compatible","qualname":"::types::RawEncoder::is_ascii_compatible","value":"pub fn is_ascii_compatible(&Self) -> bool","parent":{"krate":0,"index":88},"children":[],"decl_id":null,"docs":" Returns true if this encoding is compatible to ASCII,\n i.e. U+0000 through U+007F always map to bytes 00 through 7F and nothing else.\n","sig":null,"attributes":[{"value":"/ Returns true if this encoding is compatible to ASCII,","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/types.rs","byte_start":27816,"byte_end":27873,"line_start":138,"line_end":138,"column_start":5,"column_end":62}},{"value":"/ i.e. U+0000 through U+007F always map to bytes 00 through 7F and nothing else.","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/types.rs","byte_start":27878,"byte_end":27960,"line_start":139,"line_end":139,"column_start":5,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":91},"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/types.rs","byte_start":28380,"byte_end":28388,"line_start":147,"line_end":147,"column_start":8,"column_end":16},"name":"raw_feed","qualname":"::types::RawEncoder::raw_feed","value":"pub fn raw_feed(&mut Self, &str, &mut ByteWriter)\n-> (usize, Option<CodecError>)","parent":{"krate":0,"index":88},"children":[],"decl_id":null,"docs":" Feeds given portion of string to the encoder,\n pushes the an encoded byte sequence at the end of the given output,\n and returns a byte offset to the first unprocessed character\n (that can be zero when the first such character appeared in the prior calls to `raw_feed`)\n and optional error information (None means success).\n","sig":null,"attributes":[{"value":"/ Feeds given portion of string to the encoder,","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/types.rs","byte_start":28018,"byte_end":28067,"line_start":142,"line_end":142,"column_start":5,"column_end":54}},{"value":"/ pushes the an encoded byte sequence at the end of the given output,","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/types.rs","byte_start":28072,"byte_end":28143,"line_start":143,"line_end":143,"column_start":5,"column_end":76}},{"value":"/ and returns a byte offset to the first unprocessed character","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/types.rs","byte_start":28148,"byte_end":28212,"line_start":144,"line_end":144,"column_start":5,"column_end":69}},{"value":"/ (that can be zero when the first such character appeared in the prior calls to `raw_feed`)","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/types.rs","byte_start":28217,"byte_end":28311,"line_start":145,"line_end":145,"column_start":5,"column_end":99}},{"value":"/ and optional error information (None means success).","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/types.rs","byte_start":28316,"byte_end":28372,"line_start":146,"line_end":146,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":92},"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/types.rs","byte_start":28740,"byte_end":28750,"line_start":153,"line_end":153,"column_start":8,"column_end":18},"name":"raw_finish","qualname":"::types::RawEncoder::raw_finish","value":"pub fn raw_finish(&mut Self, &mut ByteWriter) -> Option<CodecError>","parent":{"krate":0,"index":88},"children":[],"decl_id":null,"docs":" Finishes the encoder,\n pushes the an encoded byte sequence at the end of the given output,\n and returns optional error information (None means success).\n `remaining` value of the error information, if any, is always an empty string.\n","sig":null,"attributes":[{"value":"/ Finishes the encoder,","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/types.rs","byte_start":28475,"byte_end":28500,"line_start":149,"line_end":149,"column_start":5,"column_end":30}},{"value":"/ pushes the an encoded byte sequence at the end of the given output,","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/types.rs","byte_start":28505,"byte_end":28576,"line_start":150,"line_end":150,"column_start":5,"column_end":76}},{"value":"/ and returns optional error information (None means success).","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/types.rs","byte_start":28581,"byte_end":28645,"line_start":151,"line_end":151,"column_start":5,"column_end":69}},{"value":"/ `remaining` value of the error information, if any, is always an empty string.","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/types.rs","byte_start":28650,"byte_end":28732,"line_start":152,"line_end":152,"column_start":5,"column_end":87}}]},{"kind":"Trait","id":{"krate":0,"index":93},"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/types.rs","byte_start":28978,"byte_end":28988,"line_start":158,"line_end":158,"column_start":11,"column_end":21},"name":"RawDecoder","qualname":"::types::RawDecoder","value":"RawDecoder: 'static","parent":null,"children":[{"krate":0,"index":94},{"krate":0,"index":95},{"krate":0,"index":96},{"krate":0,"index":97}],"decl_id":null,"docs":" Decoder converting a byte sequence into a Unicode string.\n This is a lower level interface, and normally `Encoding::decode` should be used instead.\n","sig":null,"attributes":[{"value":"/ Decoder converting a byte sequence into a Unicode string.","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/types.rs","byte_start":28813,"byte_end":28874,"line_start":156,"line_end":156,"column_start":1,"column_end":62}},{"value":"/ This is a lower level interface, and normally `Encoding::decode` should be used instead.","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/types.rs","byte_start":28875,"byte_end":28967,"line_start":157,"line_end":157,"column_start":1,"column_end":93}}]},{"kind":"Method","id":{"krate":0,"index":94},"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/types.rs","byte_start":29090,"byte_end":29099,"line_start":160,"line_end":160,"column_start":8,"column_end":17},"name":"from_self","qualname":"::types::RawDecoder::from_self","value":"pub fn from_self(&Self) -> Box<RawDecoder>","parent":{"krate":0,"index":93},"children":[],"decl_id":null,"docs":" Creates a fresh `RawDecoder` instance which parameters are same as `self`.\n","sig":null,"attributes":[{"value":"/ Creates a fresh `RawDecoder` instance which parameters are same as `self`.","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/types.rs","byte_start":29004,"byte_end":29082,"line_start":159,"line_end":159,"column_start":5,"column_end":83}}]},{"kind":"Method","id":{"krate":0,"index":95},"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/types.rs","byte_start":29284,"byte_end":29303,"line_start":164,"line_end":164,"column_start":8,"column_end":27},"name":"is_ascii_compatible","qualname":"::types::RawDecoder::is_ascii_compatible","value":"pub fn is_ascii_compatible(&Self) -> bool","parent":{"krate":0,"index":93},"children":[],"decl_id":null,"docs":" Returns true if this encoding is compatible to ASCII,\n i.e. bytes 00 through 7F always map to U+0000 through U+007F and nothing else.\n","sig":null,"attributes":[{"value":"/ Returns true if this encoding is compatible to ASCII,","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/types.rs","byte_start":29132,"byte_end":29189,"line_start":162,"line_end":162,"column_start":5,"column_end":62}},{"value":"/ i.e. bytes 00 through 7F always map to U+0000 through U+007F and nothing else.","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/types.rs","byte_start":29194,"byte_end":29276,"line_start":163,"line_end":163,"column_start":5,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":96},"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/types.rs","byte_start":29681,"byte_end":29689,"line_start":171,"line_end":171,"column_start":8,"column_end":16},"name":"raw_feed","qualname":"::types::RawDecoder::raw_feed","value":"pub fn raw_feed(&mut Self, &[u8], &mut StringWriter)\n-> (usize, Option<CodecError>)","parent":{"krate":0,"index":93},"children":[],"decl_id":null,"docs":" Feeds given portion of byte sequence to the encoder,\n pushes the a decoded string at the end of the given output,\n and returns an offset to the first unprocessed byte\n (that can be zero when the first such byte appeared in the prior calls to `raw_feed`)\n and optional error information (None means success).\n","sig":null,"attributes":[{"value":"/ Feeds given portion of byte sequence to the encoder,","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/types.rs","byte_start":29334,"byte_end":29390,"line_start":166,"line_end":166,"column_start":5,"column_end":61}},{"value":"/ pushes the a decoded string at the end of the given output,","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/types.rs","byte_start":29395,"byte_end":29458,"line_start":167,"line_end":167,"column_start":5,"column_end":68}},{"value":"/ and returns an offset to the first unprocessed byte","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/types.rs","byte_start":29463,"byte_end":29518,"line_start":168,"line_end":168,"column_start":5,"column_end":60}},{"value":"/ (that can be zero when the first such byte appeared in the prior calls to `raw_feed`)","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/types.rs","byte_start":29523,"byte_end":29612,"line_start":169,"line_end":169,"column_start":5,"column_end":94}},{"value":"/ and optional error information (None means success).","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/types.rs","byte_start":29617,"byte_end":29673,"line_start":170,"line_end":170,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":97},"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/types.rs","byte_start":29949,"byte_end":29959,"line_start":176,"line_end":176,"column_start":8,"column_end":18},"name":"raw_finish","qualname":"::types::RawDecoder::raw_finish","value":"pub fn raw_finish(&mut Self, &mut StringWriter) -> Option<CodecError>","parent":{"krate":0,"index":93},"children":[],"decl_id":null,"docs":" Finishes the decoder,\n pushes the a decoded string at the end of the given output,\n and returns optional error information (None means success).\n","sig":null,"attributes":[{"value":"/ Finishes the decoder,","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/types.rs","byte_start":29779,"byte_end":29804,"line_start":173,"line_end":173,"column_start":5,"column_end":30}},{"value":"/ pushes the a decoded string at the end of the given output,","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/types.rs","byte_start":29809,"byte_end":29872,"line_start":174,"line_end":174,"column_start":5,"column_end":68}},{"value":"/ and returns optional error information (None means success).","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/types.rs","byte_start":29877,"byte_end":29941,"line_start":175,"line_end":175,"column_start":5,"column_end":69}}]},{"kind":"Type","id":{"krate":0,"index":98},"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/types.rs","byte_start":30184,"byte_end":30195,"line_start":181,"line_end":181,"column_start":10,"column_end":21},"name":"EncodingRef","qualname":"::types::EncodingRef","value":"&'static Encoding + Send + Sync","parent":null,"children":[],"decl_id":null,"docs":" A trait object using dynamic dispatch which is a sendable reference to the encoding,\n for code where the encoding is not known at compile-time.\n","sig":null,"attributes":[{"value":"/ A trait object using dynamic dispatch which is a sendable reference to the encoding,","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/types.rs","byte_start":30024,"byte_end":30112,"line_start":179,"line_end":179,"column_start":1,"column_end":89}},{"value":"/ for code where the encoding is not known at compile-time.","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/types.rs","byte_start":30113,"byte_end":30174,"line_start":180,"line_end":180,"column_start":1,"column_end":62}}]},{"kind":"Trait","id":{"krate":0,"index":99},"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/types.rs","byte_start":30268,"byte_end":30276,"line_start":184,"line_end":184,"column_start":11,"column_end":19},"name":"Encoding","qualname":"::types::Encoding","value":"Encoding","parent":null,"children":[{"krate":0,"index":100},{"krate":0,"index":101},{"krate":0,"index":102},{"krate":0,"index":103},{"krate":0,"index":104},{"krate":0,"index":106},{"krate":0,"index":107},{"krate":0,"index":109}],"decl_id":null,"docs":" Character encoding.\n","sig":null,"attributes":[{"value":"/ Character encoding.","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/types.rs","byte_start":30234,"byte_end":30257,"line_start":183,"line_end":183,"column_start":1,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":100},"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/types.rs","byte_start":30476,"byte_end":30480,"line_start":188,"line_end":188,"column_start":8,"column_end":12},"name":"name","qualname":"::types::Encoding::name","value":"pub fn name(&Self) -> &'static str","parent":{"krate":0,"index":99},"children":[],"decl_id":null,"docs":" Returns the canonical name of given encoding.\n This name is guaranteed to be unique across built-in encodings,\n but it is not normative and would be at most arbitrary.\n","sig":null,"attributes":[{"value":"/ Returns the canonical name of given encoding.","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/types.rs","byte_start":30283,"byte_end":30332,"line_start":185,"line_end":185,"column_start":5,"column_end":54}},{"value":"/ This name is guaranteed to be unique across built-in encodings,","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/types.rs","byte_start":30337,"byte_end":30404,"line_start":186,"line_end":186,"column_start":5,"column_end":72}},{"value":"/ but it is not normative and would be at most arbitrary.","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/types.rs","byte_start":30409,"byte_end":30468,"line_start":187,"line_end":187,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":101},"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/types.rs","byte_start":30680,"byte_end":30691,"line_start":192,"line_end":192,"column_start":8,"column_end":19},"name":"whatwg_name","qualname":"::types::Encoding::whatwg_name","value":"pub fn whatwg_name(&Self) -> Option<&'static str>","parent":{"krate":0,"index":99},"children":[],"decl_id":null,"docs":" Returns a name of given encoding defined in the WHATWG Encoding standard, if any.\n This name often differs from `name` due to the compatibility reason.\n","sig":null,"attributes":[{"value":"/ Returns a name of given encoding defined in the WHATWG Encoding standard, if any.","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/types.rs","byte_start":30510,"byte_end":30595,"line_start":190,"line_end":190,"column_start":5,"column_end":90}},{"value":"/ This name often differs from `name` due to the compatibility reason.","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/types.rs","byte_start":30600,"byte_end":30672,"line_start":191,"line_end":191,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":102},"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/types.rs","byte_start":30771,"byte_end":30782,"line_start":195,"line_end":195,"column_start":8,"column_end":19},"name":"raw_encoder","qualname":"::types::Encoding::raw_encoder","value":"pub fn raw_encoder(&Self) -> Box<RawEncoder>","parent":{"krate":0,"index":99},"children":[],"decl_id":null,"docs":" Creates a new encoder.\n","sig":null,"attributes":[{"value":"/ Creates a new encoder.","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/types.rs","byte_start":30737,"byte_end":30763,"line_start":194,"line_end":194,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":103},"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/types.rs","byte_start":30849,"byte_end":30860,"line_start":198,"line_end":198,"column_start":8,"column_end":19},"name":"raw_decoder","qualname":"::types::Encoding::raw_decoder","value":"pub fn raw_decoder(&Self) -> Box<RawDecoder>","parent":{"krate":0,"index":99},"children":[],"decl_id":null,"docs":" Creates a new decoder.\n","sig":null,"attributes":[{"value":"/ Creates a new decoder.","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/types.rs","byte_start":30815,"byte_end":30841,"line_start":197,"line_end":197,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":104},"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/types.rs","byte_start":31107,"byte_end":31113,"line_start":204,"line_end":204,"column_start":8,"column_end":14},"name":"encode","qualname":"::types::Encoding::encode","value":"pub fn encode(&Self, &str, EncoderTrap) -> Result<Vec<u8>, Cow>","parent":{"krate":0,"index":99},"children":[],"decl_id":null,"docs":" An easy-to-use interface to `RawEncoder`.\n On the encoder error `trap` is called,\n which may return a replacement sequence to continue processing,\n or a failure to return the error.\n","sig":null,"attributes":[{"value":"/ An easy-to-use interface to `RawEncoder`.","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/types.rs","byte_start":30893,"byte_end":30938,"line_start":200,"line_end":200,"column_start":5,"column_end":50}},{"value":"/ On the encoder error `trap` is called,","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/types.rs","byte_start":30943,"byte_end":30985,"line_start":201,"line_end":201,"column_start":5,"column_end":47}},{"value":"/ which may return a replacement sequence to continue processing,","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/types.rs","byte_start":30990,"byte_end":31057,"line_start":202,"line_end":202,"column_start":5,"column_end":72}},{"value":"/ or a failure to return the error.","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/types.rs","byte_start":31062,"byte_end":31099,"line_start":203,"line_end":203,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":106},"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/types.rs","byte_start":31336,"byte_end":31345,"line_start":210,"line_end":210,"column_start":8,"column_end":17},"name":"encode_to","qualname":"::types::Encoding::encode_to","value":"pub fn encode_to(&Self, &str, EncoderTrap, &mut ByteWriter) -> Result<(), Cow>","parent":{"krate":0,"index":99},"children":[],"decl_id":null,"docs":" Encode into a `ByteWriter`.\n","sig":null,"attributes":[{"value":"/ Encode into a `ByteWriter`.","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/types.rs","byte_start":31297,"byte_end":31328,"line_start":209,"line_end":209,"column_start":5,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":107},"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/types.rs","byte_start":32934,"byte_end":32940,"line_start":249,"line_end":249,"column_start":8,"column_end":14},"name":"decode","qualname":"::types::Encoding::decode","value":"pub fn decode(&Self, &[u8], DecoderTrap) -> Result<String, Cow>","parent":{"krate":0,"index":99},"children":[],"decl_id":null,"docs":" An easy-to-use interface to `RawDecoder`.\n On the decoder error `trap` is called,\n which may return a replacement string to continue processing,\n or a failure to return the error.\n","sig":null,"attributes":[{"value":"/ An easy-to-use interface to `RawDecoder`.","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/types.rs","byte_start":32722,"byte_end":32767,"line_start":245,"line_end":245,"column_start":5,"column_end":50}},{"value":"/ On the decoder error `trap` is called,","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/types.rs","byte_start":32772,"byte_end":32814,"line_start":246,"line_end":246,"column_start":5,"column_end":47}},{"value":"/ which may return a replacement string to continue processing,","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/types.rs","byte_start":32819,"byte_end":32884,"line_start":247,"line_end":247,"column_start":5,"column_end":70}},{"value":"/ or a failure to return the error.","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/types.rs","byte_start":32889,"byte_end":32926,"line_start":248,"line_end":248,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":109},"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/types.rs","byte_start":33313,"byte_end":33322,"line_start":258,"line_end":258,"column_start":8,"column_end":17},"name":"decode_to","qualname":"::types::Encoding::decode_to","value":"pub fn decode_to(&Self, &[u8], DecoderTrap, &mut StringWriter)\n-> Result<(), Cow>","parent":{"krate":0,"index":99},"children":[],"decl_id":null,"docs":" Decode into a `StringWriter`.","sig":null,"attributes":[{"value":"/ Decode into a `StringWriter`.","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/types.rs","byte_start":33127,"byte_end":33160,"line_start":254,"line_end":254,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/types.rs","byte_start":33165,"byte_end":33168,"line_start":255,"line_end":255,"column_start":5,"column_end":8}},{"value":"/ This does *not* handle partial characters at the beginning or end of `input`!","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/types.rs","byte_start":33173,"byte_end":33254,"line_start":256,"line_end":256,"column_start":5,"column_end":86}},{"value":"/ Use `RawDecoder` for incremental decoding.","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/types.rs","byte_start":33259,"byte_end":33305,"line_start":257,"line_end":257,"column_start":5,"column_end":51}}]},{"kind":"Type","id":{"krate":0,"index":110},"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/types.rs","byte_start":34766,"byte_end":34781,"line_start":295,"line_end":295,"column_start":10,"column_end":25},"name":"EncoderTrapFunc","qualname":"::types::EncoderTrapFunc","value":"fn(encoder: &mut RawEncoder, input: &str, output: &mut ByteWriter) -> bool","parent":null,"children":[],"decl_id":null,"docs":" A type of the bare function in `EncoderTrap` values.\n","sig":null,"attributes":[{"value":"/ A type of the bare function in `EncoderTrap` values.","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/types.rs","byte_start":34700,"byte_end":34756,"line_start":294,"line_end":294,"column_start":1,"column_end":57}}]},{"kind":"Type","id":{"krate":0,"index":111},"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/types.rs","byte_start":34945,"byte_end":34960,"line_start":299,"line_end":299,"column_start":10,"column_end":25},"name":"DecoderTrapFunc","qualname":"::types::DecoderTrapFunc","value":"fn(decoder: &mut RawDecoder, input: &[u8], output: &mut StringWriter) -> bool","parent":null,"children":[],"decl_id":null,"docs":" A type of the bare function in `DecoderTrap` values.\n","sig":null,"attributes":[{"value":"/ A type of the bare function in `DecoderTrap` values.","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/types.rs","byte_start":34879,"byte_end":34935,"line_start":298,"line_end":298,"column_start":1,"column_end":57}}]},{"kind":"TupleVariant","id":{"krate":0,"index":508},"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/types.rs","byte_start":35236,"byte_end":35242,"line_start":307,"line_end":307,"column_start":5,"column_end":11},"name":"Strict","qualname":"::types::DecoderTrap::Strict","value":"DecoderTrap::Strict","parent":{"krate":0,"index":507},"children":[],"decl_id":null,"docs":" Immediately fails on errors.\n Corresponds to WHATWG \"fatal\" error algorithm.\n","sig":null,"attributes":[{"value":"/ Immediately fails on errors.","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/types.rs","byte_start":35144,"byte_end":35176,"line_start":305,"line_end":305,"column_start":5,"column_end":37}},{"value":"/ Corresponds to WHATWG \"fatal\" error algorithm.","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/types.rs","byte_start":35181,"byte_end":35231,"line_start":306,"line_end":306,"column_start":5,"column_end":55}}]},{"kind":"TupleVariant","id":{"krate":0,"index":510},"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/types.rs","byte_start":35360,"byte_end":35367,"line_start":310,"line_end":310,"column_start":5,"column_end":12},"name":"Replace","qualname":"::types::DecoderTrap::Replace","value":"DecoderTrap::Replace","parent":{"krate":0,"index":507},"children":[],"decl_id":null,"docs":" Replaces an error with a U+FFFD (decoder).\n Corresponds to WHATWG \"replacement\" error algorithm.\n","sig":null,"attributes":[{"value":"/ Replaces an error with a U+FFFD (decoder).","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/types.rs","byte_start":35248,"byte_end":35294,"line_start":308,"line_end":308,"column_start":5,"column_end":51}},{"value":"/ Corresponds to WHATWG \"replacement\" error algorithm.","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/types.rs","byte_start":35299,"byte_end":35355,"line_start":309,"line_end":309,"column_start":5,"column_end":61}}]},{"kind":"TupleVariant","id":{"krate":0,"index":512},"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/types.rs","byte_start":35457,"byte_end":35463,"line_start":312,"line_end":312,"column_start":5,"column_end":11},"name":"Ignore","qualname":"::types::DecoderTrap::Ignore","value":"DecoderTrap::Ignore","parent":{"krate":0,"index":507},"children":[],"decl_id":null,"docs":" Silently ignores an error, effectively replacing it with an empty sequence.\n","sig":null,"attributes":[{"value":"/ Silently ignores an error, effectively replacing it with an empty sequence.","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/types.rs","byte_start":35373,"byte_end":35452,"line_start":311,"line_end":311,"column_start":5,"column_end":84}}]},{"kind":"TupleVariant","id":{"krate":0,"index":514},"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/types.rs","byte_start":35667,"byte_end":35671,"line_start":316,"line_end":316,"column_start":5,"column_end":9},"name":"Call","qualname":"::types::DecoderTrap::Call","value":"DecoderTrap::Call(DecoderTrapFunc)","parent":{"krate":0,"index":507},"children":[],"decl_id":null,"docs":" Calls given function to handle decoder errors.\n The function is given the current decoder, input and output writer,\n and should return true only when it is fine to keep going.\n","sig":null,"attributes":[{"value":"/ Calls given function to handle decoder errors.","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/types.rs","byte_start":35469,"byte_end":35519,"line_start":313,"line_end":313,"column_start":5,"column_end":55}},{"value":"/ The function is given the current decoder, input and output writer,","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/types.rs","byte_start":35524,"byte_end":35595,"line_start":314,"line_end":314,"column_start":5,"column_end":76}},{"value":"/ and should return true only when it is fine to keep going.","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/types.rs","byte_start":35600,"byte_end":35662,"line_start":315,"line_end":315,"column_start":5,"column_end":67}}]},{"kind":"Enum","id":{"krate":0,"index":507},"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/types.rs","byte_start":35126,"byte_end":35137,"line_start":304,"line_end":304,"column_start":10,"column_end":21},"name":"DecoderTrap","qualname":"::types::DecoderTrap","value":"pub enum DecoderTrap {\n\n    /// Immediately fails on errors.\n    /// Corresponds to WHATWG \"fatal\" error algorithm.\n    Strict,\n\n    /// Replaces an error with a U+FFFD (decoder).\n    /// Corresponds to WHATWG \"replacement\" error algorithm.\n    Replace,\n\n    /// Silently ignores an error, effectively replacing it with an empty sequence.\n    Ignore,\n\n    /// Calls given function to handle decoder errors.\n    /// The function is given the current decoder, input and output writer,\n    /// and should return true only when it is fine to keep going.\n    Call(DecoderTrapFunc),\n}","parent":null,"children":[{"krate":0,"index":508},{"krate":0,"index":510},{"krate":0,"index":512},{"krate":0,"index":514}],"decl_id":null,"docs":" Trap, which handles decoder errors.\n","sig":null,"attributes":[{"value":"/ Trap, which handles decoder errors.","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/types.rs","byte_start":35061,"byte_end":35100,"line_start":302,"line_end":302,"column_start":1,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":113},"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/types.rs","byte_start":35845,"byte_end":35849,"line_start":322,"line_end":322,"column_start":12,"column_end":16},"name":"trap","qualname":"<DecoderTrap>::trap","value":"pub fn trap(&Self, &mut RawDecoder, &[u8], &mut StringWriter) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Handles a decoder error. May write to the output writer.\n Returns true only when it is fine to keep going.\n","sig":null,"attributes":[{"value":"/ Handles a decoder error. May write to the output writer.","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/types.rs","byte_start":35716,"byte_end":35776,"line_start":320,"line_end":320,"column_start":5,"column_end":65}},{"value":"/ Returns true only when it is fine to keep going.","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/types.rs","byte_start":35781,"byte_end":35833,"line_start":321,"line_end":321,"column_start":5,"column_end":57}}]},{"kind":"TupleVariant","id":{"krate":0,"index":519},"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/types.rs","byte_start":36685,"byte_end":36691,"line_start":347,"line_end":347,"column_start":5,"column_end":11},"name":"Strict","qualname":"::types::EncoderTrap::Strict","value":"EncoderTrap::Strict","parent":{"krate":0,"index":518},"children":[],"decl_id":null,"docs":" Immediately fails on errors.\n Corresponds to WHATWG \"fatal\" error algorithm.\n","sig":null,"attributes":[{"value":"/ Immediately fails on errors.","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/types.rs","byte_start":36593,"byte_end":36625,"line_start":345,"line_end":345,"column_start":5,"column_end":37}},{"value":"/ Corresponds to WHATWG \"fatal\" error algorithm.","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/types.rs","byte_start":36630,"byte_end":36680,"line_start":346,"line_end":346,"column_start":5,"column_end":55}}]},{"kind":"TupleVariant","id":{"krate":0,"index":521},"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/types.rs","byte_start":36884,"byte_end":36891,"line_start":351,"line_end":351,"column_start":5,"column_end":12},"name":"Replace","qualname":"::types::EncoderTrap::Replace","value":"EncoderTrap::Replace","parent":{"krate":0,"index":518},"children":[],"decl_id":null,"docs":" Replaces an error with `?` in given encoding.\n Note that this fails when `?` cannot be represented in given encoding.\n Corresponds to WHATWG \"URL\" error algorithms.\n","sig":null,"attributes":[{"value":"/ Replaces an error with `?` in given encoding.","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/types.rs","byte_start":36697,"byte_end":36746,"line_start":348,"line_end":348,"column_start":5,"column_end":54}},{"value":"/ Note that this fails when `?` cannot be represented in given encoding.","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/types.rs","byte_start":36751,"byte_end":36825,"line_start":349,"line_end":349,"column_start":5,"column_end":79}},{"value":"/ Corresponds to WHATWG \"URL\" error algorithms.","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/types.rs","byte_start":36830,"byte_end":36879,"line_start":350,"line_end":350,"column_start":5,"column_end":54}}]},{"kind":"TupleVariant","id":{"krate":0,"index":523},"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/types.rs","byte_start":36981,"byte_end":36987,"line_start":353,"line_end":353,"column_start":5,"column_end":11},"name":"Ignore","qualname":"::types::EncoderTrap::Ignore","value":"EncoderTrap::Ignore","parent":{"krate":0,"index":518},"children":[],"decl_id":null,"docs":" Silently ignores an error, effectively replacing it with an empty sequence.\n","sig":null,"attributes":[{"value":"/ Silently ignores an error, effectively replacing it with an empty sequence.","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/types.rs","byte_start":36897,"byte_end":36976,"line_start":352,"line_end":352,"column_start":5,"column_end":84}}]},{"kind":"TupleVariant","id":{"krate":0,"index":525},"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/types.rs","byte_start":37214,"byte_end":37223,"line_start":357,"line_end":357,"column_start":5,"column_end":14},"name":"NcrEscape","qualname":"::types::EncoderTrap::NcrEscape","value":"EncoderTrap::NcrEscape","parent":{"krate":0,"index":518},"children":[],"decl_id":null,"docs":" Replaces an error with XML numeric character references (e.g. `&#1234;`).\n The encoder trap fails when NCRs cannot be represented in given encoding.\n Corresponds to WHATWG \"<form>\" error algorithms.\n","sig":null,"attributes":[{"value":"/ Replaces an error with XML numeric character references (e.g. `&#1234;`).","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/types.rs","byte_start":36993,"byte_end":37070,"line_start":354,"line_end":354,"column_start":5,"column_end":82}},{"value":"/ The encoder trap fails when NCRs cannot be represented in given encoding.","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/types.rs","byte_start":37075,"byte_end":37152,"line_start":355,"line_end":355,"column_start":5,"column_end":82}},{"value":"/ Corresponds to WHATWG \"<form>\" error algorithms.","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/types.rs","byte_start":37157,"byte_end":37209,"line_start":356,"line_end":356,"column_start":5,"column_end":57}}]},{"kind":"TupleVariant","id":{"krate":0,"index":527},"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/types.rs","byte_start":37427,"byte_end":37431,"line_start":361,"line_end":361,"column_start":5,"column_end":9},"name":"Call","qualname":"::types::EncoderTrap::Call","value":"EncoderTrap::Call(EncoderTrapFunc)","parent":{"krate":0,"index":518},"children":[],"decl_id":null,"docs":" Calls given function to handle encoder errors.\n The function is given the current encoder, input and output writer,\n and should return true only when it is fine to keep going.\n","sig":null,"attributes":[{"value":"/ Calls given function to handle encoder errors.","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/types.rs","byte_start":37229,"byte_end":37279,"line_start":358,"line_end":358,"column_start":5,"column_end":55}},{"value":"/ The function is given the current encoder, input and output writer,","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/types.rs","byte_start":37284,"byte_end":37355,"line_start":359,"line_end":359,"column_start":5,"column_end":76}},{"value":"/ and should return true only when it is fine to keep going.","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/types.rs","byte_start":37360,"byte_end":37422,"line_start":360,"line_end":360,"column_start":5,"column_end":67}}]},{"kind":"Enum","id":{"krate":0,"index":518},"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/types.rs","byte_start":36575,"byte_end":36586,"line_start":344,"line_end":344,"column_start":10,"column_end":21},"name":"EncoderTrap","qualname":"::types::EncoderTrap","value":"pub enum EncoderTrap {\n\n    /// Immediately fails on errors.\n    /// Corresponds to WHATWG \"fatal\" error algorithm.\n    Strict,\n\n    /// Replaces an error with `?` in given encoding.\n    /// Note that this fails when `?` cannot be represented in given encoding.\n    /// Corresponds to WHATWG \"URL\" error algorithms.\n    Replace,\n\n    /// Silently ignores an error, effectively replacing it with an empty sequence.\n    Ignore,\n\n    /// Replaces an error with XML numeric character references (e.g. `&#1234;`).\n    /// The encoder trap fails when NCRs cannot be represented in given encoding.\n    /// Corresponds to WHATWG \"<form>\" error algorithms.\n    NcrEscape,\n\n    /// Calls given function to handle encoder errors.\n    /// The function is given the current encoder, input and output writer,\n    /// and should return true only when it is fine to keep going.\n    Call(EncoderTrapFunc),\n}","parent":null,"children":[{"krate":0,"index":519},{"krate":0,"index":521},{"krate":0,"index":523},{"krate":0,"index":525},{"krate":0,"index":527}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":117},"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/types.rs","byte_start":37606,"byte_end":37610,"line_start":367,"line_end":367,"column_start":12,"column_end":16},"name":"trap","qualname":"<EncoderTrap>::trap","value":"pub fn trap(&Self, &mut RawEncoder, &str, &mut ByteWriter) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Handles an encoder error. May write to the output writer.\n Returns true only when it is fine to keep going.\n","sig":null,"attributes":[{"value":"/ Handles an encoder error. May write to the output writer.","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/types.rs","byte_start":37476,"byte_end":37537,"line_start":365,"line_end":365,"column_start":5,"column_end":66}},{"value":"/ Returns true only when it is fine to keep going.","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/types.rs","byte_start":37542,"byte_end":37594,"line_start":366,"line_end":366,"column_start":5,"column_end":57}}]},{"kind":"Function","id":{"krate":0,"index":121},"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/types.rs","byte_start":39342,"byte_end":39348,"line_start":412,"line_end":412,"column_start":8,"column_end":14},"name":"decode","qualname":"::types::decode","value":"pub fn decode(&[u8], DecoderTrap, EncodingRef)\n-> (Result<String, Cow>, EncodingRef)","parent":null,"children":[],"decl_id":null,"docs":" Determine the encoding by looking for a Byte Order Mark (BOM)\n and decoded a single string in memory.\n Return the result and the used encoding.\n","sig":null,"attributes":[{"value":"/ Determine the encoding by looking for a Byte Order Mark (BOM)","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/types.rs","byte_start":39181,"byte_end":39246,"line_start":409,"line_end":409,"column_start":1,"column_end":66}},{"value":"/ and decoded a single string in memory.","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/types.rs","byte_start":39247,"byte_end":39289,"line_start":410,"line_end":410,"column_start":1,"column_end":43}},{"value":"/ Return the result and the used encoding.","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/types.rs","byte_start":39290,"byte_end":39334,"line_start":411,"line_end":411,"column_start":1,"column_end":45}}]},{"kind":"Mod","id":{"krate":0,"index":126},"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","byte_start":9309,"byte_end":9314,"line_start":228,"line_end":228,"column_start":9,"column_end":14},"name":"codec","qualname":"::codec","value":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","parent":null,"children":[{"krate":0,"index":127},{"krate":0,"index":146},{"krate":0,"index":171},{"krate":0,"index":199},{"krate":0,"index":240},{"krate":0,"index":293},{"krate":0,"index":318},{"krate":0,"index":388},{"krate":0,"index":454},{"krate":0,"index":479}],"decl_id":null,"docs":" Codec implementations.\n","sig":null,"attributes":[{"value":"/ Codec implementations.","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","byte_start":9274,"byte_end":9300,"line_start":227,"line_end":227,"column_start":1,"column_end":27}}]},{"kind":"Mod","id":{"krate":0,"index":127},"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/error.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"error","qualname":"::codec::error","value":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/error.rs","parent":null,"children":[{"krate":0,"index":128},{"krate":0,"index":129},{"krate":0,"index":531},{"krate":0,"index":534},{"krate":0,"index":533},{"krate":0,"index":130},{"krate":0,"index":536},{"krate":0,"index":539},{"krate":0,"index":538},{"krate":0,"index":134},{"krate":0,"index":136},{"krate":0,"index":541},{"krate":0,"index":544},{"krate":0,"index":543},{"krate":0,"index":140},{"krate":0,"index":142}],"decl_id":null,"docs":" A placeholder encoding that returns encoder/decoder error for every case.\n","sig":null,"attributes":[{"value":"! A placeholder encoding that returns encoder/decoder error for every case.","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/error.rs","byte_start":44005,"byte_end":44082,"line_start":5,"line_end":5,"column_start":1,"column_end":78}}]},{"kind":"Struct","id":{"krate":0,"index":531},"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/error.rs","byte_start":44224,"byte_end":44237,"line_start":12,"line_end":12,"column_start":12,"column_end":25},"name":"ErrorEncoding","qualname":"::codec::error::ErrorEncoding","value":"","parent":null,"children":[],"decl_id":null,"docs":" An encoding that returns encoder/decoder error for every case.\n","sig":null,"attributes":[{"value":"/ An encoding that returns encoder/decoder error for every case.","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/error.rs","byte_start":44123,"byte_end":44189,"line_start":10,"line_end":10,"column_start":1,"column_end":67}}]},{"kind":"Struct","id":{"krate":0,"index":536},"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/error.rs","byte_start":44538,"byte_end":44550,"line_start":22,"line_end":22,"column_start":12,"column_end":24},"name":"ErrorEncoder","qualname":"::codec::error::ErrorEncoder","value":"","parent":null,"children":[],"decl_id":null,"docs":" An encoder that always returns error.\n","sig":null,"attributes":[{"value":"/ An encoder that always returns error.","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/error.rs","byte_start":44462,"byte_end":44503,"line_start":20,"line_end":20,"column_start":1,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":135},"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/error.rs","byte_start":44584,"byte_end":44587,"line_start":25,"line_end":25,"column_start":12,"column_end":15},"name":"new","qualname":"<ErrorEncoder>::new","value":"pub fn new() -> Box<RawEncoder>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":541},"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/error.rs","byte_start":45266,"byte_end":45278,"line_start":47,"line_end":47,"column_start":12,"column_end":24},"name":"ErrorDecoder","qualname":"::codec::error::ErrorDecoder","value":"","parent":null,"children":[],"decl_id":null,"docs":" A decoder that always returns error.\n","sig":null,"attributes":[{"value":"/ A decoder that always returns error.","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/error.rs","byte_start":45191,"byte_end":45231,"line_start":45,"line_end":45,"column_start":1,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":141},"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/error.rs","byte_start":45312,"byte_end":45315,"line_start":50,"line_end":50,"column_start":12,"column_end":15},"name":"new","qualname":"<ErrorDecoder>::new","value":"pub fn new() -> Box<RawDecoder>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":146},"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/ascii.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"ascii","qualname":"::codec::ascii","value":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/ascii.rs","parent":null,"children":[{"krate":0,"index":147},{"krate":0,"index":148},{"krate":0,"index":149},{"krate":0,"index":546},{"krate":0,"index":549},{"krate":0,"index":548},{"krate":0,"index":150},{"krate":0,"index":551},{"krate":0,"index":554},{"krate":0,"index":553},{"krate":0,"index":154},{"krate":0,"index":156},{"krate":0,"index":556},{"krate":0,"index":559},{"krate":0,"index":558},{"krate":0,"index":162},{"krate":0,"index":164}],"decl_id":null,"docs":" 7-bit ASCII encoding.\n","sig":null,"attributes":[{"value":"! 7-bit ASCII encoding.","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/ascii.rs","byte_start":46686,"byte_end":46711,"line_start":5,"line_end":5,"column_start":1,"column_end":26}}]},{"kind":"Struct","id":{"krate":0,"index":546},"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/ascii.rs","byte_start":46980,"byte_end":46993,"line_start":18,"line_end":18,"column_start":12,"column_end":25},"name":"ASCIIEncoding","qualname":"::codec::ascii::ASCIIEncoding","value":"","parent":null,"children":[],"decl_id":null,"docs":" ASCII, also known as ISO/IEC 646:US.","sig":null,"attributes":[{"value":"*\n * ASCII, also known as ISO/IEC 646:US.\n *\n * It is both a basis and a lowest common denominator of many other encodings\n * including UTF-8, which Rust internally assumes.\n */","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/ascii.rs","byte_start":46766,"byte_end":46945,"line_start":11,"line_end":16,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":551},"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/ascii.rs","byte_start":47278,"byte_end":47290,"line_start":28,"line_end":28,"column_start":12,"column_end":24},"name":"ASCIIEncoder","qualname":"::codec::ascii::ASCIIEncoder","value":"","parent":null,"children":[],"decl_id":null,"docs":" An encoder for ASCII.\n","sig":null,"attributes":[{"value":"/ An encoder for ASCII.","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/ascii.rs","byte_start":47218,"byte_end":47243,"line_start":26,"line_end":26,"column_start":1,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":155},"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/ascii.rs","byte_start":47324,"byte_end":47327,"line_start":31,"line_end":31,"column_start":12,"column_end":15},"name":"new","qualname":"<ASCIIEncoder>::new","value":"pub fn new() -> Box<RawEncoder>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":556},"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/ascii.rs","byte_start":48411,"byte_end":48423,"line_start":63,"line_end":63,"column_start":12,"column_end":24},"name":"ASCIIDecoder","qualname":"::codec::ascii::ASCIIDecoder","value":"","parent":null,"children":[],"decl_id":null,"docs":" A decoder for ASCII.\n","sig":null,"attributes":[{"value":"/ A decoder for ASCII.","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/ascii.rs","byte_start":48352,"byte_end":48376,"line_start":61,"line_end":61,"column_start":1,"column_end":25}}]},{"kind":"Method","id":{"krate":0,"index":163},"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/ascii.rs","byte_start":48457,"byte_end":48460,"line_start":66,"line_end":66,"column_start":12,"column_end":15},"name":"new","qualname":"<ASCIIDecoder>::new","value":"pub fn new() -> Box<RawDecoder>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":171},"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/singlebyte.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"singlebyte","qualname":"::codec::singlebyte","value":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/singlebyte.rs","parent":null,"children":[{"krate":0,"index":172},{"krate":0,"index":173},{"krate":0,"index":174},{"krate":0,"index":175},{"krate":0,"index":176},{"krate":0,"index":561},{"krate":0,"index":568},{"krate":0,"index":566},{"krate":0,"index":177},{"krate":0,"index":569},{"krate":0,"index":572},{"krate":0,"index":571},{"krate":0,"index":182},{"krate":0,"index":184},{"krate":0,"index":574},{"krate":0,"index":577},{"krate":0,"index":576},{"krate":0,"index":189},{"krate":0,"index":191},{"krate":0,"index":196}],"decl_id":null,"docs":" Common codec implementation for single-byte encodings.\n","sig":null,"attributes":[{"value":"! Common codec implementation for single-byte encodings.","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/singlebyte.rs","byte_start":51588,"byte_end":51646,"line_start":5,"line_end":5,"column_start":1,"column_end":59}}]},{"kind":"Struct","id":{"krate":0,"index":561},"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/singlebyte.rs","byte_start":51821,"byte_end":51839,"line_start":13,"line_end":13,"column_start":12,"column_end":30},"name":"SingleByteEncoding","qualname":"::codec::singlebyte::SingleByteEncoding","value":"SingleByteEncoding { name, whatwg_name, index_forward, index_backward }","parent":null,"children":[{"krate":0,"index":562},{"krate":0,"index":563},{"krate":0,"index":564},{"krate":0,"index":565}],"decl_id":null,"docs":" A common framework for single-byte encodings based on ASCII.\n","sig":null,"attributes":[{"value":"/ A common framework for single-byte encodings based on ASCII.","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/singlebyte.rs","byte_start":51722,"byte_end":51786,"line_start":11,"line_end":11,"column_start":1,"column_end":65}}]},{"kind":"Field","id":{"krate":0,"index":562},"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/singlebyte.rs","byte_start":51850,"byte_end":51854,"line_start":14,"line_end":14,"column_start":9,"column_end":13},"name":"name","qualname":"::codec::singlebyte::SingleByteEncoding::name","value":"&'static str","parent":{"krate":0,"index":561},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":563},"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/singlebyte.rs","byte_start":51878,"byte_end":51889,"line_start":15,"line_end":15,"column_start":9,"column_end":20},"name":"whatwg_name","qualname":"::codec::singlebyte::SingleByteEncoding::whatwg_name","value":"std::option::Option<&'static str>","parent":{"krate":0,"index":561},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":564},"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/singlebyte.rs","byte_start":51921,"byte_end":51934,"line_start":16,"line_end":16,"column_start":9,"column_end":22},"name":"index_forward","qualname":"::codec::singlebyte::SingleByteEncoding::index_forward","value":"fn(u8) -> u16","parent":{"krate":0,"index":561},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":565},"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/singlebyte.rs","byte_start":51973,"byte_end":51987,"line_start":17,"line_end":17,"column_start":9,"column_end":23},"name":"index_backward","qualname":"::codec::singlebyte::SingleByteEncoding::index_backward","value":"fn(u32) -> u8","parent":{"krate":0,"index":561},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":569},"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/singlebyte.rs","byte_start":52459,"byte_end":52476,"line_start":29,"line_end":29,"column_start":12,"column_end":29},"name":"SingleByteEncoder","qualname":"::codec::singlebyte::SingleByteEncoder","value":"SingleByteEncoder {  }","parent":null,"children":[{"krate":0,"index":570}],"decl_id":null,"docs":" An encoder for single-byte encodings based on ASCII.\n","sig":null,"attributes":[{"value":"/ An encoder for single-byte encodings based on ASCII.","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/singlebyte.rs","byte_start":52368,"byte_end":52424,"line_start":27,"line_end":27,"column_start":1,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":183},"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/singlebyte.rs","byte_start":52567,"byte_end":52570,"line_start":34,"line_end":34,"column_start":12,"column_end":15},"name":"new","qualname":"<SingleByteEncoder>::new","value":"pub fn new(fn(: u32) -> u8) -> Box<RawEncoder>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":574},"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/singlebyte.rs","byte_start":53803,"byte_end":53820,"line_start":71,"line_end":71,"column_start":12,"column_end":29},"name":"SingleByteDecoder","qualname":"::codec::singlebyte::SingleByteDecoder","value":"SingleByteDecoder {  }","parent":null,"children":[{"krate":0,"index":575}],"decl_id":null,"docs":" A decoder for single-byte encodings based on ASCII.\n","sig":null,"attributes":[{"value":"/ A decoder for single-byte encodings based on ASCII.","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/singlebyte.rs","byte_start":53713,"byte_end":53768,"line_start":69,"line_end":69,"column_start":1,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":190},"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/singlebyte.rs","byte_start":53910,"byte_end":53913,"line_start":76,"line_end":76,"column_start":12,"column_end":15},"name":"new","qualname":"<SingleByteDecoder>::new","value":"pub fn new(fn(: u8) -> u16) -> Box<RawDecoder>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":196},"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/singlebyte.rs","byte_start":55134,"byte_end":55144,"line_start":114,"line_end":114,"column_start":9,"column_end":19},"name":"iso_8859_1","qualname":"::codec::singlebyte::iso_8859_1","value":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/singlebyte.rs","parent":null,"children":[{"krate":0,"index":197},{"krate":0,"index":198}],"decl_id":null,"docs":" Algorithmic mapping for ISO 8859-1.\n","sig":null,"attributes":[{"value":"/ Algorithmic mapping for ISO 8859-1.","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/singlebyte.rs","byte_start":55086,"byte_end":55125,"line_start":113,"line_end":113,"column_start":1,"column_end":40}}]},{"kind":"Function","id":{"krate":0,"index":197},"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/singlebyte.rs","byte_start":55168,"byte_end":55175,"line_start":115,"line_end":115,"column_start":22,"column_end":29},"name":"forward","qualname":"::codec::singlebyte::iso_8859_1::forward","value":"pub fn forward(u8) -> u16","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/singlebyte.rs","byte_start":55151,"byte_end":55160,"line_start":115,"line_end":115,"column_start":5,"column_end":14}}]},{"kind":"Function","id":{"krate":0,"index":198},"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/singlebyte.rs","byte_start":55230,"byte_end":55238,"line_start":116,"line_end":116,"column_start":22,"column_end":30},"name":"backward","qualname":"::codec::singlebyte::iso_8859_1::backward","value":"pub fn backward(u32) -> u8","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/singlebyte.rs","byte_start":55213,"byte_end":55222,"line_start":116,"line_end":116,"column_start":5,"column_end":14}}]},{"kind":"Mod","id":{"krate":0,"index":199},"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/utf_8.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"utf_8","qualname":"::codec::utf_8","value":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/utf_8.rs","parent":null,"children":[{"krate":0,"index":200},{"krate":0,"index":201},{"krate":0,"index":202},{"krate":0,"index":203},{"krate":0,"index":204},{"krate":0,"index":579},{"krate":0,"index":582},{"krate":0,"index":581},{"krate":0,"index":205},{"krate":0,"index":584},{"krate":0,"index":587},{"krate":0,"index":586},{"krate":0,"index":210},{"krate":0,"index":212},{"krate":0,"index":589},{"krate":0,"index":595},{"krate":0,"index":594},{"krate":0,"index":217},{"krate":0,"index":220},{"krate":0,"index":222},{"krate":0,"index":224},{"krate":0,"index":225},{"krate":0,"index":226},{"krate":0,"index":227},{"krate":0,"index":230},{"krate":0,"index":237}],"decl_id":null,"docs":" UTF-8, the universal encoding.\n","sig":null,"attributes":[{"value":"! UTF-8, the universal encoding.","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/utf_8.rs","byte_start":56879,"byte_end":56913,"line_start":25,"line_end":25,"column_start":1,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":579},"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/utf_8.rs","byte_start":57789,"byte_end":57801,"line_start":47,"line_end":47,"column_start":12,"column_end":24},"name":"UTF8Encoding","qualname":"::codec::utf_8::UTF8Encoding","value":"","parent":null,"children":[],"decl_id":null,"docs":" UTF-8 (UCS Transformation Format, 8-bit).","sig":null,"attributes":[{"value":"*\n * UTF-8 (UCS Transformation Format, 8-bit).\n *\n * This is a Unicode encoding compatible to ASCII (ISO/IEC 646:US)\n * and able to represent all Unicode codepoints uniquely and unambiguously.\n * It has a variable-length design,\n * where one codepoint may use 1 (up to U+007F), 2 (up to U+07FF), 3 (up to U+FFFF)\n * and 4 bytes (up to U+10FFFF) depending on its value.\n * The first byte of the sequence is distinct from other \"continuation\" bytes of the sequence\n * making UTF-8 self-synchronizable and easy to handle.\n * It has a fixed endianness, and can be lexicographically sorted by codepoints.\n *\n * The UTF-8 scanner used by this module is heavily based on Bjoern Hoehrmann's\n * [Flexible and Economical UTF-8 Decoder](http://bjoern.hoehrmann.de/utf-8/decoder/dfa/).\n */","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/utf_8.rs","byte_start":56975,"byte_end":57754,"line_start":31,"line_end":45,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":584},"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/utf_8.rs","byte_start":58151,"byte_end":58162,"line_start":58,"line_end":58,"column_start":12,"column_end":23},"name":"UTF8Encoder","qualname":"::codec::utf_8::UTF8Encoder","value":"","parent":null,"children":[],"decl_id":null,"docs":" An encoder for UTF-8.\n","sig":null,"attributes":[{"value":"/ An encoder for UTF-8.","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/utf_8.rs","byte_start":58091,"byte_end":58116,"line_start":56,"line_end":56,"column_start":1,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":211},"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/utf_8.rs","byte_start":58195,"byte_end":58198,"line_start":61,"line_end":61,"column_start":12,"column_end":15},"name":"new","qualname":"<UTF8Encoder>::new","value":"pub fn new() -> Box<RawEncoder>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":589},"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/utf_8.rs","byte_start":58822,"byte_end":58833,"line_start":82,"line_end":82,"column_start":12,"column_end":23},"name":"UTF8Decoder","qualname":"::codec::utf_8::UTF8Decoder","value":"UTF8Decoder {  }","parent":null,"children":[{"krate":0,"index":590},{"krate":0,"index":591},{"krate":0,"index":593}],"decl_id":null,"docs":" A decoder for UTF-8.\n","sig":null,"attributes":[{"value":"/ A decoder for UTF-8.","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/utf_8.rs","byte_start":58763,"byte_end":58787,"line_start":80,"line_end":80,"column_start":1,"column_end":25}}]},{"kind":"Method","id":{"krate":0,"index":218},"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/utf_8.rs","byte_start":58925,"byte_end":58928,"line_start":89,"line_end":89,"column_start":12,"column_end":15},"name":"new","qualname":"<UTF8Decoder>::new","value":"pub fn new() -> Box<RawDecoder>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":237},"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/utf_8.rs","byte_start":64342,"byte_end":64351,"line_start":214,"line_end":214,"column_start":8,"column_end":17},"name":"from_utf8","qualname":"::codec::utf_8::from_utf8","value":"pub fn from_utf8<'a>(&'a [u8]) -> Option<&'a str>","parent":null,"children":[],"decl_id":null,"docs":" Almost equivalent to `std::str::from_utf8`.\n This function is provided for the fair benchmark against the stdlib's UTF-8 conversion\n functions, as rust-encoding always allocates a new string.\n","sig":null,"attributes":[{"value":"/ Almost equivalent to `std::str::from_utf8`.","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/utf_8.rs","byte_start":64133,"byte_end":64180,"line_start":211,"line_end":211,"column_start":1,"column_end":48}},{"value":"/ This function is provided for the fair benchmark against the stdlib's UTF-8 conversion","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/utf_8.rs","byte_start":64181,"byte_end":64271,"line_start":212,"line_end":212,"column_start":1,"column_end":91}},{"value":"/ functions, as rust-encoding always allocates a new string.","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/utf_8.rs","byte_start":64272,"byte_end":64334,"line_start":213,"line_end":213,"column_start":1,"column_end":63}}]},{"kind":"Mod","id":{"krate":0,"index":240},"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/utf_16.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"utf_16","qualname":"::codec::utf_16","value":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/utf_16.rs","parent":null,"children":[{"krate":0,"index":241},{"krate":0,"index":242},{"krate":0,"index":1251},{"krate":0,"index":243},{"krate":0,"index":244},{"krate":0,"index":598},{"krate":0,"index":601},{"krate":0,"index":600},{"krate":0,"index":603},{"krate":0,"index":606},{"krate":0,"index":605},{"krate":0,"index":245},{"krate":0,"index":250},{"krate":0,"index":255},{"krate":0,"index":608},{"krate":0,"index":613},{"krate":0,"index":611},{"krate":0,"index":260},{"krate":0,"index":261},{"krate":0,"index":262},{"krate":0,"index":263},{"krate":0,"index":264},{"krate":0,"index":616},{"krate":0,"index":621},{"krate":0,"index":619},{"krate":0,"index":270},{"krate":0,"index":273},{"krate":0,"index":279},{"krate":0,"index":284},{"krate":0,"index":287}],"decl_id":null,"docs":" UTF-16.\n","sig":null,"attributes":[{"value":"! UTF-16.","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/utf_16.rs","byte_start":85571,"byte_end":85582,"line_start":5,"line_end":5,"column_start":1,"column_end":12}}]},{"kind":"Struct","id":{"krate":0,"index":598},"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/utf_16.rs","byte_start":85847,"byte_end":85853,"line_start":16,"line_end":16,"column_start":12,"column_end":18},"name":"Little","qualname":"::codec::utf_16::Little","value":"","parent":null,"children":[],"decl_id":null,"docs":" An implementation type for little endian.","sig":null,"attributes":[{"value":"/ An implementation type for little endian.","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/utf_16.rs","byte_start":85672,"byte_end":85717,"line_start":12,"line_end":12,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/utf_16.rs","byte_start":85718,"byte_end":85721,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ Can be used as a type parameter to `UTF16Encoding`, `UTF16Encoder` and `UTF16Decoder`.","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/utf_16.rs","byte_start":85722,"byte_end":85812,"line_start":14,"line_end":14,"column_start":1,"column_end":91}}]},{"kind":"Struct","id":{"krate":0,"index":603},"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/utf_16.rs","byte_start":86028,"byte_end":86031,"line_start":22,"line_end":22,"column_start":12,"column_end":15},"name":"Big","qualname":"::codec::utf_16::Big","value":"","parent":null,"children":[],"decl_id":null,"docs":" An implementation type for big endian.","sig":null,"attributes":[{"value":"/ An implementation type for big endian.","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/utf_16.rs","byte_start":85856,"byte_end":85898,"line_start":18,"line_end":18,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/utf_16.rs","byte_start":85899,"byte_end":85902,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ Can be used as a type parameter to `UTF16Encoding`, `UTF16Encoder` and `UTF16Decoder`.","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/utf_16.rs","byte_start":85903,"byte_end":85993,"line_start":20,"line_end":20,"column_start":1,"column_end":91}}]},{"kind":"Trait","id":{"krate":0,"index":245},"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/utf_16.rs","byte_start":86187,"byte_end":86193,"line_start":26,"line_end":26,"column_start":11,"column_end":17},"name":"Endian","qualname":"::codec::utf_16::Endian","value":"Endian: Clone + 'static","parent":null,"children":[{"krate":0,"index":246},{"krate":0,"index":247},{"krate":0,"index":248},{"krate":0,"index":249}],"decl_id":null,"docs":" An internal trait used to customize UTF-16 implementations.\n","sig":null,"attributes":[{"value":"/ An internal trait used to customize UTF-16 implementations.","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/utf_16.rs","byte_start":86034,"byte_end":86097,"line_start":24,"line_end":24,"column_start":1,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":246},"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/utf_16.rs","byte_start":86220,"byte_end":86224,"line_start":27,"line_end":27,"column_start":8,"column_end":12},"name":"name","qualname":"::codec::utf_16::Endian::name","value":"pub fn name() -> &'static str","parent":{"krate":0,"index":245},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":247},"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/utf_16.rs","byte_start":86251,"byte_end":86262,"line_start":28,"line_end":28,"column_start":8,"column_end":19},"name":"whatwg_name","qualname":"::codec::utf_16::Endian::whatwg_name","value":"pub fn whatwg_name() -> Option<&'static str>","parent":{"krate":0,"index":245},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":248},"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/utf_16.rs","byte_start":86297,"byte_end":86312,"line_start":29,"line_end":29,"column_start":8,"column_end":23},"name":"write_two_bytes","qualname":"::codec::utf_16::Endian::write_two_bytes","value":"pub fn write_two_bytes(&mut ByteWriter, u8, u8)","parent":{"krate":0,"index":245},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":249},"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/utf_16.rs","byte_start":86364,"byte_end":86380,"line_start":30,"line_end":30,"column_start":8,"column_end":24},"name":"concat_two_bytes","qualname":"::codec::utf_16::Endian::concat_two_bytes","value":"pub fn concat_two_bytes(u16, u8) -> u16","parent":{"krate":0,"index":245},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":608},"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/utf_16.rs","byte_start":87815,"byte_end":87828,"line_start":73,"line_end":73,"column_start":12,"column_end":25},"name":"UTF16Encoding","qualname":"::codec::utf_16::UTF16Encoding","value":"UTF16Encoding {  }","parent":null,"children":[{"krate":0,"index":610}],"decl_id":null,"docs":" UTF-16 (UCS Transformation Format, 16-bit).","sig":null,"attributes":[{"value":"*\n * UTF-16 (UCS Transformation Format, 16-bit).\n *\n * This is a Unicode encoding where one codepoint may use\n * 2 (up to U+FFFF) or 4 bytes (up to U+10FFFF) depending on its value.\n * It uses a \"surrogate\" mechanism to encode non-BMP codepoints,\n * which are represented as a pair of lower surrogate and upper surrogate characters.\n * In this effect, surrogate characters (U+D800..DFFF) cannot appear alone\n * and cannot be included in a valid Unicode string.\n *\n * ## Specialization\n *\n * This type is specialized with endianness type `E`,\n * which should be either `Little` (little endian) or `Big` (big endian).\n */","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/utf_16.rs","byte_start":87159,"byte_end":87780,"line_start":57,"line_end":71,"column_start":1,"column_end":4}}]},{"kind":"Type","id":{"krate":0,"index":260},"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/utf_16.rs","byte_start":87914,"byte_end":87929,"line_start":78,"line_end":78,"column_start":10,"column_end":25},"name":"UTF16LEEncoding","qualname":"::codec::utf_16::UTF16LEEncoding","value":"UTF16Encoding<Little>","parent":null,"children":[],"decl_id":null,"docs":" A type for UTF-16 in little endian.\n","sig":null,"attributes":[{"value":"/ A type for UTF-16 in little endian.","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/utf_16.rs","byte_start":87865,"byte_end":87904,"line_start":77,"line_end":77,"column_start":1,"column_end":40}}]},{"kind":"Type","id":{"krate":0,"index":261},"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/utf_16.rs","byte_start":88001,"byte_end":88016,"line_start":80,"line_end":80,"column_start":10,"column_end":25},"name":"UTF16BEEncoding","qualname":"::codec::utf_16::UTF16BEEncoding","value":"UTF16Encoding<Big>","parent":null,"children":[],"decl_id":null,"docs":" A type for UTF-16 in big endian.\n","sig":null,"attributes":[{"value":"/ A type for UTF-16 in big endian.","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/utf_16.rs","byte_start":87955,"byte_end":87991,"line_start":79,"line_end":79,"column_start":1,"column_end":37}}]},{"kind":"Const","id":{"krate":0,"index":262},"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/utf_16.rs","byte_start":88095,"byte_end":88112,"line_start":83,"line_end":83,"column_start":11,"column_end":28},"name":"UTF_16LE_ENCODING","qualname":"::codec::utf_16::UTF_16LE_ENCODING","value":"UTF16LEEncoding","parent":null,"children":[],"decl_id":null,"docs":" An instance for UTF-16 in little endian.\n","sig":null,"attributes":[{"value":"/ An instance for UTF-16 in little endian.","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/utf_16.rs","byte_start":88040,"byte_end":88084,"line_start":82,"line_end":82,"column_start":1,"column_end":45}}]},{"kind":"Const","id":{"krate":0,"index":263},"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/utf_16.rs","byte_start":88224,"byte_end":88241,"line_start":85,"line_end":85,"column_start":11,"column_end":28},"name":"UTF_16BE_ENCODING","qualname":"::codec::utf_16::UTF_16BE_ENCODING","value":"UTF16BEEncoding","parent":null,"children":[],"decl_id":null,"docs":" An instance for UTF-16 in big endian.\n","sig":null,"attributes":[{"value":"/ An instance for UTF-16 in big endian.","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/utf_16.rs","byte_start":88172,"byte_end":88213,"line_start":84,"line_end":84,"column_start":1,"column_end":42}}]},{"kind":"Struct","id":{"krate":0,"index":616},"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/utf_16.rs","byte_start":88868,"byte_end":88880,"line_start":103,"line_end":103,"column_start":12,"column_end":24},"name":"UTF16Encoder","qualname":"::codec::utf_16::UTF16Encoder","value":"UTF16Encoder {  }","parent":null,"children":[{"krate":0,"index":618}],"decl_id":null,"docs":" An encoder for UTF-16.","sig":null,"attributes":[{"value":"*\n * An encoder for UTF-16.\n *\n * ## Specialization\n *\n * This type is specialized with endianness type `E`,\n * which should be either `Little` (little endian) or `Big` (big endian).\n */","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/utf_16.rs","byte_start":88645,"byte_end":88833,"line_start":94,"line_end":101,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":279},"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/utf_16.rs","byte_start":90562,"byte_end":90574,"line_start":154,"line_end":154,"column_start":12,"column_end":24},"name":"UTF16Decoder","qualname":"::codec::utf_16::UTF16Decoder","value":"UTF16Decoder {  }","parent":null,"children":[{"krate":0,"index":281},{"krate":0,"index":282},{"krate":0,"index":283}],"decl_id":null,"docs":" A decoder for UTF-16.","sig":null,"attributes":[{"value":"*\n * A decoder for UTF-16.\n *\n * ## Specialization\n *\n * This type is specialized with endianness type `E`,\n * which should be either `Little` (little endian) or `Big` (big endian).\n */","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/utf_16.rs","byte_start":90363,"byte_end":90550,"line_start":146,"line_end":153,"column_start":1,"column_end":4}}]},{"kind":"Method","id":{"krate":0,"index":286},"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/utf_16.rs","byte_start":90699,"byte_end":90702,"line_start":161,"line_end":161,"column_start":12,"column_end":15},"name":"new","qualname":"<UTF16Decoder<E>>::new","value":"pub fn new() -> Box<RawDecoder>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":293},"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/korean.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"korean","qualname":"::codec::korean","value":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/korean.rs","parent":null,"children":[{"krate":0,"index":294},{"krate":0,"index":295},{"krate":0,"index":1257},{"krate":0,"index":296},{"krate":0,"index":297},{"krate":0,"index":298},{"krate":0,"index":624},{"krate":0,"index":627},{"krate":0,"index":626},{"krate":0,"index":299},{"krate":0,"index":629},{"krate":0,"index":632},{"krate":0,"index":631},{"krate":0,"index":304},{"krate":0,"index":306},{"krate":0,"index":634},{"krate":0,"index":637},{"krate":0,"index":636},{"krate":0,"index":311},{"krate":0,"index":313},{"krate":0,"index":639}],"decl_id":null,"docs":" Legacy Korean encodings based on KS X 1001.\n","sig":null,"attributes":[{"value":"! Legacy Korean encodings based on KS X 1001.","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/korean.rs","byte_start":108286,"byte_end":108333,"line_start":5,"line_end":5,"column_start":1,"column_end":48}}]},{"kind":"Struct","id":{"krate":0,"index":624},"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/korean.rs","byte_start":109061,"byte_end":109079,"line_start":25,"line_end":25,"column_start":12,"column_end":30},"name":"Windows949Encoding","qualname":"::codec::korean::Windows949Encoding","value":"","parent":null,"children":[],"decl_id":null,"docs":" Windows code page 949.","sig":null,"attributes":[{"value":"*\n * Windows code page 949.\n *\n * This is a Korean encoding derived from EUC-KR,\n * which is so widespread that most occurrences of EUC-KR actually mean this encoding.\n * Unlike KS X 1001 (and EUC-KR) which only contains a set of 2,350 common Hangul syllables,\n * it assigns remaining 8,822 Hangul syllables to the two-byte sequence\n * which second byte have its MSB unset (i.e. `[81-C6] [41-5A 61-7A 81-FE]`).\n * Its design strongly resembles that of Shift_JIS but less prone to errors\n * since the set of MSB-unset second bytes is much limited compared to Shift_JIS.\n */","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/korean.rs","byte_start":108452,"byte_end":109026,"line_start":13,"line_end":23,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":629},"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/korean.rs","byte_start":109494,"byte_end":109511,"line_start":36,"line_end":36,"column_start":12,"column_end":29},"name":"Windows949Encoder","qualname":"::codec::korean::Windows949Encoder","value":"","parent":null,"children":[],"decl_id":null,"docs":" An encoder for Windows code page 949.\n","sig":null,"attributes":[{"value":"/ An encoder for Windows code page 949.","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/korean.rs","byte_start":109418,"byte_end":109459,"line_start":34,"line_end":34,"column_start":1,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":305},"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/korean.rs","byte_start":109550,"byte_end":109553,"line_start":39,"line_end":39,"column_start":12,"column_end":15},"name":"new","qualname":"<Windows949Encoder>::new","value":"pub fn new() -> Box<RawEncoder>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":318},"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/japanese.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"japanese","qualname":"::codec::japanese","value":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/japanese.rs","parent":null,"children":[{"krate":0,"index":319},{"krate":0,"index":320},{"krate":0,"index":1267},{"krate":0,"index":321},{"krate":0,"index":322},{"krate":0,"index":323},{"krate":0,"index":324},{"krate":0,"index":325},{"krate":0,"index":1273},{"krate":0,"index":326},{"krate":0,"index":1275},{"krate":0,"index":327},{"krate":0,"index":1277},{"krate":0,"index":678},{"krate":0,"index":681},{"krate":0,"index":680},{"krate":0,"index":328},{"krate":0,"index":683},{"krate":0,"index":686},{"krate":0,"index":685},{"krate":0,"index":333},{"krate":0,"index":335},{"krate":0,"index":688},{"krate":0,"index":691},{"krate":0,"index":690},{"krate":0,"index":340},{"krate":0,"index":342},{"krate":0,"index":693},{"krate":0,"index":750},{"krate":0,"index":753},{"krate":0,"index":752},{"krate":0,"index":347},{"krate":0,"index":755},{"krate":0,"index":758},{"krate":0,"index":757},{"krate":0,"index":352},{"krate":0,"index":354},{"krate":0,"index":760},{"krate":0,"index":763},{"krate":0,"index":762},{"krate":0,"index":359},{"krate":0,"index":361},{"krate":0,"index":765},{"krate":0,"index":804},{"krate":0,"index":807},{"krate":0,"index":806},{"krate":0,"index":366},{"krate":0,"index":809},{"krate":0,"index":819},{"krate":0,"index":820},{"krate":0,"index":817},{"krate":0,"index":816},{"krate":0,"index":822},{"krate":0,"index":825},{"krate":0,"index":824},{"krate":0,"index":371},{"krate":0,"index":373},{"krate":0,"index":827},{"krate":0,"index":830},{"krate":0,"index":829},{"krate":0,"index":381},{"krate":0,"index":383},{"krate":0,"index":832}],"decl_id":null,"docs":" Legacy Japanese encodings based on JIS X 0208 and JIS X 0212.\n","sig":null,"attributes":[{"value":"! Legacy Japanese encodings based on JIS X 0208 and JIS X 0212.","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/japanese.rs","byte_start":117979,"byte_end":118044,"line_start":5,"line_end":5,"column_start":1,"column_end":66}}]},{"kind":"Struct","id":{"krate":0,"index":678},"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/japanese.rs","byte_start":118867,"byte_end":118880,"line_start":30,"line_end":30,"column_start":12,"column_end":25},"name":"EUCJPEncoding","qualname":"::codec::japanese::EUCJPEncoding","value":"","parent":null,"children":[],"decl_id":null,"docs":" EUC-JP. (XXX with asymmetric JIS X 0212 support)","sig":null,"attributes":[{"value":"*\n * EUC-JP. (XXX with asymmetric JIS X 0212 support)\n *\n * This is a Japanese encoding created from three JIS character sets:\n *\n * - JIS X 0201, which lower half is ISO/IEC 646:JP (US-ASCII with yen sign and overline)\n *   and upper half contains legacy half-width Katakanas.\n * - JIS X 0208, a primary graphic character set (94x94).\n * - JIS X 0212, a supplementary graphic character set (94x94).\n *\n * EUC-JP contains the lower half of JIS X 0201 in G0 (`[21-7E]`),\n * JIS X 0208 in G1 (`[A1-FE] [A1-FE]`),\n * the upper half of JIS X 0212 in G2 (`8E [A1-DF]`), and\n * JIS X 0212 in G3 (`8F [A1-FE] [A1-FE]`).\n */","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/japanese.rs","byte_start":118214,"byte_end":118832,"line_start":14,"line_end":28,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":683},"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/japanese.rs","byte_start":119269,"byte_end":119281,"line_start":41,"line_end":41,"column_start":12,"column_end":24},"name":"EUCJPEncoder","qualname":"::codec::japanese::EUCJPEncoder","value":"","parent":null,"children":[],"decl_id":null,"docs":" An encoder for EUC-JP with unused G3 character set.\n","sig":null,"attributes":[{"value":"/ An encoder for EUC-JP with unused G3 character set.","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/japanese.rs","byte_start":119179,"byte_end":119234,"line_start":39,"line_end":39,"column_start":1,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":334},"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/japanese.rs","byte_start":119315,"byte_end":119318,"line_start":44,"line_end":44,"column_start":12,"column_end":15},"name":"new","qualname":"<EUCJPEncoder>::new","value":"pub fn new() -> Box<RawEncoder>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":750},"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/japanese.rs","byte_start":133378,"byte_end":133396,"line_start":450,"line_end":450,"column_start":12,"column_end":30},"name":"Windows31JEncoding","qualname":"::codec::japanese::Windows31JEncoding","value":"","parent":null,"children":[],"decl_id":null,"docs":" Windows code page 932, i.e. Shift_JIS with IBM/NEC extensions.","sig":null,"attributes":[{"value":"*\n * Windows code page 932, i.e. Shift_JIS with IBM/NEC extensions.\n *\n * This is a Japanese encoding for JIS X 0208\n * compatible to the original assignments of JIS X 0201 (`[21-7E A1-DF]`).\n * The 94 by 94 region of JIS X 0208 is sliced, or rather \"shifted\" into\n * the odd half (odd row number) and even half (even row number),\n * and merged into the 188 by 47 region mapped to `[81-9F E0-EF] [40-7E 80-FC]`.\n * The remaining area, `[80 A0 F0-FF] [40-7E 80-FC]`, has been subjected to\n * numerous extensions incompatible to each other.\n * This particular implementation uses IBM/NEC extensions\n * which assigns more characters to `[F0-FC 80-FC]` and also to the Private Use Area (PUA).\n * It requires some cares to handle\n * since the second byte of JIS X 0208 can have its MSB unset.\n */","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/japanese.rs","byte_start":132550,"byte_end":133343,"line_start":434,"line_end":448,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":755},"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/japanese.rs","byte_start":133826,"byte_end":133843,"line_start":461,"line_end":461,"column_start":12,"column_end":29},"name":"Windows31JEncoder","qualname":"::codec::japanese::Windows31JEncoder","value":"","parent":null,"children":[],"decl_id":null,"docs":" An encoder for Shift_JIS with IBM/NEC extensions.\n","sig":null,"attributes":[{"value":"/ An encoder for Shift_JIS with IBM/NEC extensions.","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/japanese.rs","byte_start":133738,"byte_end":133791,"line_start":459,"line_end":459,"column_start":1,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":353},"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/japanese.rs","byte_start":133882,"byte_end":133885,"line_start":464,"line_end":464,"column_start":12,"column_end":15},"name":"new","qualname":"<Windows31JEncoder>::new","value":"pub fn new() -> Box<RawEncoder>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":804},"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/japanese.rs","byte_start":145107,"byte_end":145124,"line_start":772,"line_end":772,"column_start":12,"column_end":29},"name":"ISO2022JPEncoding","qualname":"::codec::japanese::ISO2022JPEncoding","value":"","parent":null,"children":[],"decl_id":null,"docs":" ISO-2022-JP.","sig":null,"attributes":[{"value":"*\n * ISO-2022-JP.\n *\n * This version of ISO-2022-JP does not correspond to any standardized repertoire of character sets\n * due to the widespread implementation differences. The following character sets are supported:\n *\n * - JIS X 0201-1976 roman (`ESC ( J` or `ESC ( B`; the latter is originally allocated to ASCII\n *   but willfully violated)\n * - JIS X 0201-1976 kana (`ESC ( I`)\n * - JIS X 0208-1983 (`ESC $ B` or `ESC $ @`; the latter is originally allocated to JIS X 0208-1978\n *   but willfully violated)\n * - JIS X 0212-1990 (`ESC $ ( D`, XXX asymmetric support)\n */","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/japanese.rs","byte_start":144495,"byte_end":145072,"line_start":758,"line_end":770,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":822},"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/japanese.rs","byte_start":145705,"byte_end":145721,"line_start":790,"line_end":790,"column_start":12,"column_end":28},"name":"ISO2022JPEncoder","qualname":"::codec::japanese::ISO2022JPEncoder","value":"ISO2022JPEncoder {  }","parent":null,"children":[{"krate":0,"index":823}],"decl_id":null,"docs":" An encoder for ISO-2022-JP without JIS X 0212/0213 support.\n","sig":null,"attributes":[{"value":"/ An encoder for ISO-2022-JP without JIS X 0212/0213 support.","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/japanese.rs","byte_start":145607,"byte_end":145670,"line_start":788,"line_end":788,"column_start":1,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":372},"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/japanese.rs","byte_start":145785,"byte_end":145788,"line_start":795,"line_end":795,"column_start":12,"column_end":15},"name":"new","qualname":"<ISO2022JPEncoder>::new","value":"pub fn new() -> Box<RawEncoder>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":388},"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/simpchinese.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"simpchinese","qualname":"::codec::simpchinese","value":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/simpchinese.rs","parent":null,"children":[{"krate":0,"index":389},{"krate":0,"index":390},{"krate":0,"index":1291},{"krate":0,"index":391},{"krate":0,"index":1293},{"krate":0,"index":392},{"krate":0,"index":393},{"krate":0,"index":394},{"krate":0,"index":923},{"krate":0,"index":926},{"krate":0,"index":925},{"krate":0,"index":928},{"krate":0,"index":931},{"krate":0,"index":930},{"krate":0,"index":395},{"krate":0,"index":399},{"krate":0,"index":403},{"krate":0,"index":933},{"krate":0,"index":938},{"krate":0,"index":936},{"krate":0,"index":407},{"krate":0,"index":408},{"krate":0,"index":409},{"krate":0,"index":410},{"krate":0,"index":411},{"krate":0,"index":941},{"krate":0,"index":946},{"krate":0,"index":944},{"krate":0,"index":417},{"krate":0,"index":420},{"krate":0,"index":949},{"krate":0,"index":952},{"krate":0,"index":951},{"krate":0,"index":426},{"krate":0,"index":428},{"krate":0,"index":954},{"krate":0,"index":1010},{"krate":0,"index":1013},{"krate":0,"index":1012},{"krate":0,"index":433},{"krate":0,"index":1015},{"krate":0,"index":1018},{"krate":0,"index":1017},{"krate":0,"index":438},{"krate":0,"index":440},{"krate":0,"index":1020},{"krate":0,"index":1023},{"krate":0,"index":1022},{"krate":0,"index":447},{"krate":0,"index":449},{"krate":0,"index":1025}],"decl_id":null,"docs":" Legacy simplified Chinese encodings based on GB 2312 and GB 18030.\n","sig":null,"attributes":[{"value":"! Legacy simplified Chinese encodings based on GB 2312 and GB 18030.","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/simpchinese.rs","byte_start":168277,"byte_end":168347,"line_start":5,"line_end":5,"column_start":1,"column_end":71}}]},{"kind":"Struct","id":{"krate":0,"index":923},"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/simpchinese.rs","byte_start":168684,"byte_end":168687,"line_start":19,"line_end":19,"column_start":12,"column_end":15},"name":"GBK","qualname":"::codec::simpchinese::GBK","value":"","parent":null,"children":[],"decl_id":null,"docs":" An implementation type for GBK.","sig":null,"attributes":[{"value":"/ An implementation type for GBK.","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/simpchinese.rs","byte_start":168501,"byte_end":168536,"line_start":14,"line_end":14,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/simpchinese.rs","byte_start":168537,"byte_end":168540,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ Can be used as a type parameter to `GBEncoding` and `GBEncoder`.","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/simpchinese.rs","byte_start":168541,"byte_end":168609,"line_start":16,"line_end":16,"column_start":1,"column_end":69}},{"value":"/ (GB18030Decoder is shared by both.)","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/simpchinese.rs","byte_start":168610,"byte_end":168649,"line_start":17,"line_end":17,"column_start":1,"column_end":40}}]},{"kind":"Struct","id":{"krate":0,"index":928},"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/simpchinese.rs","byte_start":168877,"byte_end":168884,"line_start":26,"line_end":26,"column_start":12,"column_end":19},"name":"GB18030","qualname":"::codec::simpchinese::GB18030","value":"","parent":null,"children":[],"decl_id":null,"docs":" An implementation type for GB18030.","sig":null,"attributes":[{"value":"/ An implementation type for GB18030.","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/simpchinese.rs","byte_start":168690,"byte_end":168729,"line_start":21,"line_end":21,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/simpchinese.rs","byte_start":168730,"byte_end":168733,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ Can be used as a type parameter to `GBEncoding` and `GBEncoder.'","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/simpchinese.rs","byte_start":168734,"byte_end":168802,"line_start":23,"line_end":23,"column_start":1,"column_end":69}},{"value":"/ (GB18030Decoder is shared by both.)","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/simpchinese.rs","byte_start":168803,"byte_end":168842,"line_start":24,"line_end":24,"column_start":1,"column_end":40}}]},{"kind":"Trait","id":{"krate":0,"index":395},"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/simpchinese.rs","byte_start":169049,"byte_end":169055,"line_start":30,"line_end":30,"column_start":11,"column_end":17},"name":"GBType","qualname":"::codec::simpchinese::GBType","value":"GBType: Clone + 'static","parent":null,"children":[{"krate":0,"index":396},{"krate":0,"index":397},{"krate":0,"index":398}],"decl_id":null,"docs":" An internal trait used to customize GBK and GB18030 implementations.\n","sig":null,"attributes":[{"value":"/ An internal trait used to customize GBK and GB18030 implementations.","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/simpchinese.rs","byte_start":168887,"byte_end":168959,"line_start":28,"line_end":28,"column_start":1,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":396},"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/simpchinese.rs","byte_start":169082,"byte_end":169086,"line_start":31,"line_end":31,"column_start":8,"column_end":12},"name":"name","qualname":"::codec::simpchinese::GBType::name","value":"pub fn name() -> &'static str","parent":{"krate":0,"index":395},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":397},"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/simpchinese.rs","byte_start":169113,"byte_end":169124,"line_start":32,"line_end":32,"column_start":8,"column_end":19},"name":"whatwg_name","qualname":"::codec::simpchinese::GBType::whatwg_name","value":"pub fn whatwg_name() -> Option<&'static str>","parent":{"krate":0,"index":395},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":398},"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/simpchinese.rs","byte_start":169159,"byte_end":169175,"line_start":33,"line_end":33,"column_start":8,"column_end":24},"name":"initial_gbk_flag","qualname":"::codec::simpchinese::GBType::initial_gbk_flag","value":"pub fn initial_gbk_flag() -> bool","parent":{"krate":0,"index":395},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":933},"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/simpchinese.rs","byte_start":170969,"byte_end":170979,"line_start":77,"line_end":77,"column_start":12,"column_end":22},"name":"GBEncoding","qualname":"::codec::simpchinese::GBEncoding","value":"GBEncoding {  }","parent":null,"children":[{"krate":0,"index":935}],"decl_id":null,"docs":" GBK and GB 18030-2005.","sig":null,"attributes":[{"value":"*\n * GBK and GB 18030-2005.\n *\n * The original GBK 1.0 region spans `[81-FE] [40-7E 80-FE]`, and is derived from\n * several different revisions of a family of encodings named \"GBK\":\n *\n * - GBK as specified in the normative annex of GB 13000.1-93,\n *   the domestic standard equivalent to Unicode 1.1,\n *   consisted of characters included in Unicode 1.1 and not in GB 2312-80.\n * - Windows code page 936 is the widespread extension to GBK.\n * - Due to the popularity of Windows code page 936,\n *   a formal encoding based on Windows code page 936 (while adding new characters)\n *   was standardized into GBK 1.0.\n * - Finally, GB 18030 added four-byte sequences to GBK for becoming a pan-Unicode encoding,\n *   while adding new characters to the (former) GBK region again.\n *\n * GB 18030-2005 is a simplified Chinese encoding which extends GBK 1.0 to a pan-Unicode encoding.\n * It assigns four-byte sequences to every Unicode codepoint missing from the GBK area,\n * lexicographically ordered with occasional \"gaps\" for codepoints in the GBK area.\n * Due to this compatibility decision,\n * there is no simple relationship between these four-byte sequences and Unicode codepoints,\n * though there *exists* a relatively simple mapping algorithm with a small lookup table.\n *\n * ## Specialization\n *\n * This type is specialized with GBType `T`,\n * which should be either `GBK` or `GB18030`.\n */","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/simpchinese.rs","byte_start":169541,"byte_end":170934,"line_start":48,"line_end":75,"column_start":1,"column_end":4}}]},{"kind":"Type","id":{"krate":0,"index":407},"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/simpchinese.rs","byte_start":171045,"byte_end":171056,"line_start":82,"line_end":82,"column_start":10,"column_end":21},"name":"GBKEncoding","qualname":"::codec::simpchinese::GBKEncoding","value":"GBEncoding<GBK>","parent":null,"children":[],"decl_id":null,"docs":" A type for GBK.\n","sig":null,"attributes":[{"value":"/ A type for GBK.","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/simpchinese.rs","byte_start":171016,"byte_end":171035,"line_start":81,"line_end":81,"column_start":1,"column_end":20}}]},{"kind":"Type","id":{"krate":0,"index":408},"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/simpchinese.rs","byte_start":171109,"byte_end":171124,"line_start":84,"line_end":84,"column_start":10,"column_end":25},"name":"GB18030Encoding","qualname":"::codec::simpchinese::GB18030Encoding","value":"GBEncoding<GB18030>","parent":null,"children":[],"decl_id":null,"docs":" A type for GB18030.\n","sig":null,"attributes":[{"value":"/ A type for GB18030.","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/simpchinese.rs","byte_start":171076,"byte_end":171099,"line_start":83,"line_end":83,"column_start":1,"column_end":24}}]},{"kind":"Const","id":{"krate":0,"index":409},"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/simpchinese.rs","byte_start":171184,"byte_end":171196,"line_start":87,"line_end":87,"column_start":11,"column_end":23},"name":"GBK_ENCODING","qualname":"::codec::simpchinese::GBK_ENCODING","value":"GBKEncoding","parent":null,"children":[],"decl_id":null,"docs":" An instance for GBK.\n","sig":null,"attributes":[{"value":"/ An instance for GBK.","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/simpchinese.rs","byte_start":171149,"byte_end":171173,"line_start":86,"line_end":86,"column_start":1,"column_end":25}}]},{"kind":"Const","id":{"krate":0,"index":410},"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/simpchinese.rs","byte_start":171288,"byte_end":171304,"line_start":89,"line_end":89,"column_start":11,"column_end":27},"name":"GB18030_ENCODING","qualname":"::codec::simpchinese::GB18030_ENCODING","value":"GB18030Encoding","parent":null,"children":[],"decl_id":null,"docs":" An instance for GB18030.\n","sig":null,"attributes":[{"value":"/ An instance for GB18030.","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/simpchinese.rs","byte_start":171249,"byte_end":171277,"line_start":88,"line_end":88,"column_start":1,"column_end":29}}]},{"kind":"Struct","id":{"krate":0,"index":941},"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/simpchinese.rs","byte_start":171891,"byte_end":171900,"line_start":107,"line_end":107,"column_start":12,"column_end":21},"name":"GBEncoder","qualname":"::codec::simpchinese::GBEncoder","value":"GBEncoder {  }","parent":null,"children":[{"krate":0,"index":943}],"decl_id":null,"docs":" An encoder for GBK and GB18030.","sig":null,"attributes":[{"value":"*\n * An encoder for GBK and GB18030.\n *\n * ## Specialization\n *\n * This type is specialized with GBType `T`,\n * which should be either `GBK` or `GB18030`.\n */","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/simpchinese.rs","byte_start":171696,"byte_end":171856,"line_start":98,"line_end":105,"column_start":1,"column_end":4}}]},{"kind":"Method","id":{"krate":0,"index":419},"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/simpchinese.rs","byte_start":171979,"byte_end":171982,"line_start":112,"line_end":112,"column_start":12,"column_end":15},"name":"new","qualname":"<GBEncoder<T>>::new","value":"pub fn new() -> Box<RawEncoder>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1010},"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/simpchinese.rs","byte_start":186534,"byte_end":186544,"line_start":475,"line_end":475,"column_start":12,"column_end":22},"name":"HZEncoding","qualname":"::codec::simpchinese::HZEncoding","value":"","parent":null,"children":[],"decl_id":null,"docs":" HZ. (RFC 1843)","sig":null,"attributes":[{"value":"*\n * HZ. (RFC 1843)\n *\n * This is a simplified Chinese encoding based on GB 2312.\n * It bears a resemblance to ISO 2022 encodings in such that the printable escape sequences `~{`\n * and `~}` are used to delimit a sequence of 7-bit-safe GB 2312 sequences. For the comparison,\n * they are equivalent to ISO-2022-CN escape sequences `ESC $ ) A` and `ESC ( B`.\n * Additional escape sequences `~~` (for a literal `~`) and `~\\n` (ignored) are also supported.\n */","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/simpchinese.rs","byte_start":186041,"byte_end":186499,"line_start":465,"line_end":473,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":1015},"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/simpchinese.rs","byte_start":186873,"byte_end":186882,"line_start":486,"line_end":486,"column_start":12,"column_end":21},"name":"HZEncoder","qualname":"::codec::simpchinese::HZEncoder","value":"HZEncoder {  }","parent":null,"children":[{"krate":0,"index":1016}],"decl_id":null,"docs":" An encoder for HZ.\n","sig":null,"attributes":[{"value":"/ An encoder for HZ.","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/simpchinese.rs","byte_start":186816,"byte_end":186838,"line_start":484,"line_end":484,"column_start":1,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":439},"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/simpchinese.rs","byte_start":186935,"byte_end":186938,"line_start":491,"line_end":491,"column_start":12,"column_end":15},"name":"new","qualname":"<HZEncoder>::new","value":"pub fn new() -> Box<RawEncoder>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":454},"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/tradchinese.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"tradchinese","qualname":"::codec::tradchinese","value":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/tradchinese.rs","parent":null,"children":[{"krate":0,"index":455},{"krate":0,"index":456},{"krate":0,"index":1307},{"krate":0,"index":457},{"krate":0,"index":458},{"krate":0,"index":459},{"krate":0,"index":1082},{"krate":0,"index":1085},{"krate":0,"index":1084},{"krate":0,"index":460},{"krate":0,"index":1087},{"krate":0,"index":1090},{"krate":0,"index":1089},{"krate":0,"index":465},{"krate":0,"index":467},{"krate":0,"index":1092},{"krate":0,"index":1095},{"krate":0,"index":1094},{"krate":0,"index":472},{"krate":0,"index":474},{"krate":0,"index":1097}],"decl_id":null,"docs":" Legacy traditional Chinese encodings.\n","sig":null,"attributes":[{"value":"! Legacy traditional Chinese encodings.","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/tradchinese.rs","byte_start":197259,"byte_end":197300,"line_start":5,"line_end":5,"column_start":1,"column_end":42}}]},{"kind":"Struct","id":{"krate":0,"index":1082},"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/tradchinese.rs","byte_start":198233,"byte_end":198252,"line_start":28,"line_end":28,"column_start":12,"column_end":31},"name":"BigFive2003Encoding","qualname":"::codec::tradchinese::BigFive2003Encoding","value":"","parent":null,"children":[],"decl_id":null,"docs":" Big5-2003 with common extensions. (XXX with asymmetric HKSCS-2008 support)","sig":null,"attributes":[{"value":"*\n * Big5-2003 with common extensions. (XXX with asymmetric HKSCS-2008 support)\n *\n * This is a traditional Chinese encoding spanning the region `[81-FE] [40-7E A1-FE]`.\n * Originally a proprietary encoding by the consortium of five companies (hence the name),\n * the Republic of China government standardized Big5-2003 in an appendix of CNS 11643\n * so that CNS 11643 plane 1 and plane 2 have\n * an almost identical set of characters as Big5 (but with a different mapping).\n * The Hong Kong government has an official extension to Big5\n * named Hong Kong Supplementary Character Set (HKSCS).\n *\n * This particular implementation of Big5 includes the widespread ETEN and HKSCS extensions,\n * but excludes less common extensions such as Big5+, Big-5E and Unicode-at-on.\n */","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/tradchinese.rs","byte_start":197424,"byte_end":198198,"line_start":13,"line_end":26,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":1087},"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/tradchinese.rs","byte_start":198663,"byte_end":198681,"line_start":39,"line_end":39,"column_start":12,"column_end":30},"name":"BigFive2003Encoder","qualname":"::codec::tradchinese::BigFive2003Encoder","value":"","parent":null,"children":[],"decl_id":null,"docs":" An encoder for Big5-2003.\n","sig":null,"attributes":[{"value":"/ An encoder for Big5-2003.","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/tradchinese.rs","byte_start":198599,"byte_end":198628,"line_start":37,"line_end":37,"column_start":1,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":466},"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/tradchinese.rs","byte_start":198721,"byte_end":198724,"line_start":42,"line_end":42,"column_start":12,"column_end":15},"name":"new","qualname":"<BigFive2003Encoder>::new","value":"pub fn new() -> Box<RawEncoder>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":479},"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/whatwg.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"whatwg","qualname":"::codec::whatwg","value":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/whatwg.rs","parent":null,"children":[{"krate":0,"index":480},{"krate":0,"index":481},{"krate":0,"index":1136},{"krate":0,"index":1139},{"krate":0,"index":1138},{"krate":0,"index":482},{"krate":0,"index":487}],"decl_id":null,"docs":" Asymmetric or special encoding constructions required by the WHATWG Encoding standard.\n","sig":null,"attributes":[{"value":"! Asymmetric or special encoding constructions required by the WHATWG Encoding standard.","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/whatwg.rs","byte_start":207493,"byte_end":207583,"line_start":5,"line_end":5,"column_start":1,"column_end":91}}]},{"kind":"Struct","id":{"krate":0,"index":1136},"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/whatwg.rs","byte_start":207805,"byte_end":207828,"line_start":13,"line_end":13,"column_start":12,"column_end":35},"name":"EncoderOnlyUTF8Encoding","qualname":"::codec::whatwg::EncoderOnlyUTF8Encoding","value":"","parent":null,"children":[],"decl_id":null,"docs":" Replacement encoding used to solve a particular attack vector due to mismatching server and\n client supports for encodings. It is rarely useful outside.\n","sig":null,"attributes":[{"value":"/ Replacement encoding used to solve a particular attack vector due to mismatching server and","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/whatwg.rs","byte_start":207611,"byte_end":207706,"line_start":10,"line_end":10,"column_start":1,"column_end":96}},{"value":"/ client supports for encodings. It is rarely useful outside.","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/whatwg.rs","byte_start":207707,"byte_end":207770,"line_start":11,"line_end":11,"column_start":1,"column_end":64}}]},{"kind":"Mod","id":{"krate":0,"index":487},"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/whatwg.rs","byte_start":208280,"byte_end":208294,"line_start":23,"line_end":23,"column_start":9,"column_end":23},"name":"x_user_defined","qualname":"::codec::whatwg::x_user_defined","value":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/whatwg.rs","parent":null,"children":[{"krate":0,"index":488},{"krate":0,"index":489}],"decl_id":null,"docs":" Algorithmic mapping for `x-user-defined` encoding.\n","sig":null,"attributes":[{"value":"/ Algorithmic mapping for `x-user-defined` encoding.","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/whatwg.rs","byte_start":208217,"byte_end":208271,"line_start":22,"line_end":22,"column_start":1,"column_end":55}}]},{"kind":"Function","id":{"krate":0,"index":488},"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/whatwg.rs","byte_start":208322,"byte_end":208329,"line_start":25,"line_end":25,"column_start":12,"column_end":19},"name":"forward","qualname":"::codec::whatwg::x_user_defined::forward","value":"pub fn forward(u8) -> u16","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/whatwg.rs","byte_start":208301,"byte_end":208310,"line_start":24,"line_end":24,"column_start":5,"column_end":14}}]},{"kind":"Function","id":{"krate":0,"index":489},"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/whatwg.rs","byte_start":208412,"byte_end":208420,"line_start":30,"line_end":30,"column_start":12,"column_end":20},"name":"backward","qualname":"::codec::whatwg::x_user_defined::backward","value":"pub fn backward(u32) -> u8","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/whatwg.rs","byte_start":208391,"byte_end":208400,"line_start":29,"line_end":29,"column_start":5,"column_end":14}}]},{"kind":"Mod","id":{"krate":0,"index":490},"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/all.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"all","qualname":"::all","value":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/all.rs","parent":null,"children":[{"krate":0,"index":491},{"krate":0,"index":492},{"krate":0,"index":493},{"krate":0,"index":1141},{"krate":0,"index":1142},{"krate":0,"index":1143},{"krate":0,"index":1144},{"krate":0,"index":1145},{"krate":0,"index":1146},{"krate":0,"index":1147},{"krate":0,"index":1148},{"krate":0,"index":1149},{"krate":0,"index":1150},{"krate":0,"index":1151},{"krate":0,"index":1152},{"krate":0,"index":1153},{"krate":0,"index":1154},{"krate":0,"index":1155},{"krate":0,"index":1156},{"krate":0,"index":1157},{"krate":0,"index":1158},{"krate":0,"index":1159},{"krate":0,"index":1160},{"krate":0,"index":1161},{"krate":0,"index":1162},{"krate":0,"index":1163},{"krate":0,"index":1164},{"krate":0,"index":1165},{"krate":0,"index":1166},{"krate":0,"index":1167},{"krate":0,"index":1168},{"krate":0,"index":1169},{"krate":0,"index":1170},{"krate":0,"index":1171},{"krate":0,"index":1172},{"krate":0,"index":1173},{"krate":0,"index":1174},{"krate":0,"index":1175},{"krate":0,"index":1176},{"krate":0,"index":1177},{"krate":0,"index":1178},{"krate":0,"index":1179},{"krate":0,"index":1180},{"krate":0,"index":1181},{"krate":0,"index":496},{"krate":0,"index":499}],"decl_id":null,"docs":" A list of all supported encodings. Useful for encodings fixed in the compile time.\n","sig":null,"attributes":[{"value":"! A list of all supported encodings. Useful for encodings fixed in the compile time.","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/all.rs","byte_start":208639,"byte_end":208725,"line_start":5,"line_end":5,"column_start":1,"column_end":87}}]},{"kind":"Const","id":{"krate":0,"index":1141},"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/all.rs","byte_start":210070,"byte_end":210075,"line_start":39,"line_end":39,"column_start":13,"column_end":18},"name":"ERROR","qualname":"::all::ERROR","value":"&'static codec::error::ErrorEncoding","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1142},"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/all.rs","byte_start":210127,"byte_end":210132,"line_start":40,"line_end":40,"column_start":13,"column_end":18},"name":"ASCII","qualname":"::all::ASCII","value":"&'static codec::ascii::ASCIIEncoding","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1143},"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/all.rs","byte_start":210188,"byte_end":210194,"line_start":41,"line_end":41,"column_start":17,"column_end":23},"name":"IBM866","qualname":"::all::IBM866","value":"&'static codec::singlebyte::SingleByteEncoding","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1144},"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/all.rs","byte_start":210254,"byte_end":210264,"line_start":42,"line_end":42,"column_start":17,"column_end":27},"name":"ISO_8859_1","qualname":"::all::ISO_8859_1","value":"&'static codec::singlebyte::SingleByteEncoding","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1145},"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/all.rs","byte_start":210337,"byte_end":210347,"line_start":43,"line_end":43,"column_start":17,"column_end":27},"name":"ISO_8859_2","qualname":"::all::ISO_8859_2","value":"&'static codec::singlebyte::SingleByteEncoding","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1146},"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/all.rs","byte_start":210415,"byte_end":210425,"line_start":44,"line_end":44,"column_start":17,"column_end":27},"name":"ISO_8859_3","qualname":"::all::ISO_8859_3","value":"&'static codec::singlebyte::SingleByteEncoding","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1147},"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/all.rs","byte_start":210493,"byte_end":210503,"line_start":45,"line_end":45,"column_start":17,"column_end":27},"name":"ISO_8859_4","qualname":"::all::ISO_8859_4","value":"&'static codec::singlebyte::SingleByteEncoding","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1148},"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/all.rs","byte_start":210571,"byte_end":210581,"line_start":46,"line_end":46,"column_start":17,"column_end":27},"name":"ISO_8859_5","qualname":"::all::ISO_8859_5","value":"&'static codec::singlebyte::SingleByteEncoding","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1149},"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/all.rs","byte_start":210649,"byte_end":210659,"line_start":47,"line_end":47,"column_start":17,"column_end":27},"name":"ISO_8859_6","qualname":"::all::ISO_8859_6","value":"&'static codec::singlebyte::SingleByteEncoding","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1150},"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/all.rs","byte_start":210727,"byte_end":210737,"line_start":48,"line_end":48,"column_start":17,"column_end":27},"name":"ISO_8859_7","qualname":"::all::ISO_8859_7","value":"&'static codec::singlebyte::SingleByteEncoding","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1151},"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/all.rs","byte_start":210805,"byte_end":210815,"line_start":49,"line_end":49,"column_start":17,"column_end":27},"name":"ISO_8859_8","qualname":"::all::ISO_8859_8","value":"&'static codec::singlebyte::SingleByteEncoding","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1152},"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/all.rs","byte_start":210883,"byte_end":210894,"line_start":50,"line_end":50,"column_start":17,"column_end":28},"name":"ISO_8859_10","qualname":"::all::ISO_8859_10","value":"&'static codec::singlebyte::SingleByteEncoding","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1153},"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/all.rs","byte_start":210964,"byte_end":210975,"line_start":51,"line_end":51,"column_start":17,"column_end":28},"name":"ISO_8859_13","qualname":"::all::ISO_8859_13","value":"&'static codec::singlebyte::SingleByteEncoding","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1154},"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/all.rs","byte_start":211045,"byte_end":211056,"line_start":52,"line_end":52,"column_start":17,"column_end":28},"name":"ISO_8859_14","qualname":"::all::ISO_8859_14","value":"&'static codec::singlebyte::SingleByteEncoding","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1155},"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/all.rs","byte_start":211126,"byte_end":211137,"line_start":53,"line_end":53,"column_start":17,"column_end":28},"name":"ISO_8859_15","qualname":"::all::ISO_8859_15","value":"&'static codec::singlebyte::SingleByteEncoding","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1156},"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/all.rs","byte_start":211207,"byte_end":211218,"line_start":54,"line_end":54,"column_start":17,"column_end":28},"name":"ISO_8859_16","qualname":"::all::ISO_8859_16","value":"&'static codec::singlebyte::SingleByteEncoding","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1157},"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/all.rs","byte_start":211288,"byte_end":211294,"line_start":55,"line_end":55,"column_start":17,"column_end":23},"name":"KOI8_R","qualname":"::all::KOI8_R","value":"&'static codec::singlebyte::SingleByteEncoding","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1158},"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/all.rs","byte_start":211354,"byte_end":211360,"line_start":56,"line_end":56,"column_start":17,"column_end":23},"name":"KOI8_U","qualname":"::all::KOI8_U","value":"&'static codec::singlebyte::SingleByteEncoding","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1159},"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/all.rs","byte_start":211420,"byte_end":211429,"line_start":57,"line_end":57,"column_start":17,"column_end":26},"name":"MAC_ROMAN","qualname":"::all::MAC_ROMAN","value":"&'static codec::singlebyte::SingleByteEncoding","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1160},"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/all.rs","byte_start":211514,"byte_end":211525,"line_start":58,"line_end":58,"column_start":17,"column_end":28},"name":"WINDOWS_874","qualname":"::all::WINDOWS_874","value":"&'static codec::singlebyte::SingleByteEncoding","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1161},"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/all.rs","byte_start":211595,"byte_end":211607,"line_start":59,"line_end":59,"column_start":17,"column_end":29},"name":"WINDOWS_1250","qualname":"::all::WINDOWS_1250","value":"&'static codec::singlebyte::SingleByteEncoding","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1162},"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/all.rs","byte_start":211679,"byte_end":211691,"line_start":60,"line_end":60,"column_start":17,"column_end":29},"name":"WINDOWS_1251","qualname":"::all::WINDOWS_1251","value":"&'static codec::singlebyte::SingleByteEncoding","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1163},"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/all.rs","byte_start":211763,"byte_end":211775,"line_start":61,"line_end":61,"column_start":17,"column_end":29},"name":"WINDOWS_1252","qualname":"::all::WINDOWS_1252","value":"&'static codec::singlebyte::SingleByteEncoding","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1164},"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/all.rs","byte_start":211847,"byte_end":211859,"line_start":62,"line_end":62,"column_start":17,"column_end":29},"name":"WINDOWS_1253","qualname":"::all::WINDOWS_1253","value":"&'static codec::singlebyte::SingleByteEncoding","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1165},"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/all.rs","byte_start":211931,"byte_end":211943,"line_start":63,"line_end":63,"column_start":17,"column_end":29},"name":"WINDOWS_1254","qualname":"::all::WINDOWS_1254","value":"&'static codec::singlebyte::SingleByteEncoding","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1166},"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/all.rs","byte_start":212015,"byte_end":212027,"line_start":64,"line_end":64,"column_start":17,"column_end":29},"name":"WINDOWS_1255","qualname":"::all::WINDOWS_1255","value":"&'static codec::singlebyte::SingleByteEncoding","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1167},"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/all.rs","byte_start":212099,"byte_end":212111,"line_start":65,"line_end":65,"column_start":17,"column_end":29},"name":"WINDOWS_1256","qualname":"::all::WINDOWS_1256","value":"&'static codec::singlebyte::SingleByteEncoding","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1168},"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/all.rs","byte_start":212183,"byte_end":212195,"line_start":66,"line_end":66,"column_start":17,"column_end":29},"name":"WINDOWS_1257","qualname":"::all::WINDOWS_1257","value":"&'static codec::singlebyte::SingleByteEncoding","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1169},"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/all.rs","byte_start":212267,"byte_end":212279,"line_start":67,"line_end":67,"column_start":17,"column_end":29},"name":"WINDOWS_1258","qualname":"::all::WINDOWS_1258","value":"&'static codec::singlebyte::SingleByteEncoding","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1170},"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/all.rs","byte_start":212351,"byte_end":212363,"line_start":68,"line_end":68,"column_start":17,"column_end":29},"name":"MAC_CYRILLIC","qualname":"::all::MAC_CYRILLIC","value":"&'static codec::singlebyte::SingleByteEncoding","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1171},"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/all.rs","byte_start":212469,"byte_end":212474,"line_start":70,"line_end":70,"column_start":13,"column_end":18},"name":"UTF_8","qualname":"::all::UTF_8","value":"&'static codec::utf_8::UTF8Encoding","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1172},"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/all.rs","byte_start":212525,"byte_end":212533,"line_start":71,"line_end":71,"column_start":13,"column_end":21},"name":"UTF_16LE","qualname":"::all::UTF_16LE","value":"&'static codec::utf_16::UTF16LEEncoding","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1173},"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/all.rs","byte_start":212610,"byte_end":212618,"line_start":72,"line_end":72,"column_start":13,"column_end":21},"name":"UTF_16BE","qualname":"::all::UTF_16BE","value":"&'static codec::utf_16::UTF16BEEncoding","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1174},"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/all.rs","byte_start":212695,"byte_end":212706,"line_start":73,"line_end":73,"column_start":13,"column_end":24},"name":"WINDOWS_949","qualname":"::all::WINDOWS_949","value":"&'static codec::korean::Windows949Encoding","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1175},"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/all.rs","byte_start":212764,"byte_end":212770,"line_start":74,"line_end":74,"column_start":13,"column_end":19},"name":"EUC_JP","qualname":"::all::EUC_JP","value":"&'static codec::japanese::EUCJPEncoding","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1176},"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/all.rs","byte_start":212825,"byte_end":212836,"line_start":75,"line_end":75,"column_start":13,"column_end":24},"name":"WINDOWS_31J","qualname":"::all::WINDOWS_31J","value":"&'static codec::japanese::Windows31JEncoding","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1177},"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/all.rs","byte_start":212896,"byte_end":212907,"line_start":76,"line_end":76,"column_start":13,"column_end":24},"name":"ISO_2022_JP","qualname":"::all::ISO_2022_JP","value":"&'static codec::japanese::ISO2022JPEncoding","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1178},"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/all.rs","byte_start":212966,"byte_end":212969,"line_start":77,"line_end":77,"column_start":13,"column_end":16},"name":"GBK","qualname":"::all::GBK","value":"&'static codec::simpchinese::GBKEncoding","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1179},"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/all.rs","byte_start":213042,"byte_end":213049,"line_start":78,"line_end":78,"column_start":13,"column_end":20},"name":"GB18030","qualname":"::all::GB18030","value":"&'static codec::simpchinese::GB18030Encoding","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1180},"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/all.rs","byte_start":213130,"byte_end":213132,"line_start":79,"line_end":79,"column_start":13,"column_end":15},"name":"HZ","qualname":"::all::HZ","value":"&'static codec::simpchinese::HZEncoding","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1181},"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/all.rs","byte_start":213187,"byte_end":213196,"line_start":80,"line_end":80,"column_start":13,"column_end":22},"name":"BIG5_2003","qualname":"::all::BIG5_2003","value":"&'static codec::tradchinese::BigFive2003Encoding","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":496},"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/all.rs","byte_start":213257,"byte_end":213263,"line_start":82,"line_end":82,"column_start":9,"column_end":15},"name":"whatwg","qualname":"::all::whatwg","value":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/all.rs","parent":null,"children":[{"krate":0,"index":497},{"krate":0,"index":498},{"krate":0,"index":1182},{"krate":0,"index":1183},{"krate":0,"index":1184}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1182},"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/all.rs","byte_start":213337,"byte_end":213351,"line_start":86,"line_end":86,"column_start":21,"column_end":35},"name":"X_USER_DEFINED","qualname":"::all::whatwg::X_USER_DEFINED","value":"&'static codec::singlebyte::SingleByteEncoding","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1183},"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/all.rs","byte_start":213482,"byte_end":213494,"line_start":88,"line_end":88,"column_start":21,"column_end":33},"name":"ISO_8859_8_I","qualname":"::all::whatwg::ISO_8859_8_I","value":"&'static codec::singlebyte::SingleByteEncoding","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1184},"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/all.rs","byte_start":213564,"byte_end":213575,"line_start":89,"line_end":89,"column_start":17,"column_end":28},"name":"REPLACEMENT","qualname":"::all::whatwg::REPLACEMENT","value":"&'static codec::whatwg::EncoderOnlyUTF8Encoding","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":499},"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/all.rs","byte_start":213697,"byte_end":213706,"line_start":93,"line_end":93,"column_start":8,"column_end":17},"name":"encodings","qualname":"::all::encodings","value":"pub fn encodings() -> &'static [EncodingRef]","parent":null,"children":[],"decl_id":null,"docs":" Returns a list of references to the encodings available.\n","sig":null,"attributes":[{"value":"/ Returns a list of references to the encodings available.","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/all.rs","byte_start":213629,"byte_end":213689,"line_start":92,"line_end":92,"column_start":1,"column_end":61}}]},{"kind":"Mod","id":{"krate":0,"index":501},"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/label.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"label","qualname":"::label","value":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/label.rs","parent":null,"children":[{"krate":0,"index":502},{"krate":0,"index":503},{"krate":0,"index":504},{"krate":0,"index":506}],"decl_id":null,"docs":" An interface for retrieving an encoding (or a set of encodings) from a string/numeric label.\n","sig":null,"attributes":[{"value":"! An interface for retrieving an encoding (or a set of encodings) from a string/numeric label.","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/label.rs","byte_start":214869,"byte_end":214965,"line_start":5,"line_end":5,"column_start":1,"column_end":97}}]},{"kind":"Function","id":{"krate":0,"index":504},"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/label.rs","byte_start":215197,"byte_end":215223,"line_start":12,"line_end":12,"column_start":8,"column_end":34},"name":"encoding_from_whatwg_label","qualname":"::label::encoding_from_whatwg_label","value":"pub fn encoding_from_whatwg_label(&str) -> Option<EncodingRef>","parent":null,"children":[],"decl_id":null,"docs":" Returns an encoding from given label, defined in the WHATWG Encoding standard, if any.\n Implements \"get an encoding\" algorithm: http://encoding.spec.whatwg.org/#concept-encoding-get\n","sig":null,"attributes":[{"value":"/ Returns an encoding from given label, defined in the WHATWG Encoding standard, if any.","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/label.rs","byte_start":215001,"byte_end":215091,"line_start":10,"line_end":10,"column_start":1,"column_end":91}},{"value":"/ Implements \"get an encoding\" algorithm: http://encoding.spec.whatwg.org/#concept-encoding-get","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/label.rs","byte_start":215092,"byte_end":215189,"line_start":11,"line_end":11,"column_start":1,"column_end":98}}]},{"kind":"Function","id":{"krate":0,"index":506},"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/label.rs","byte_start":222594,"byte_end":222625,"line_start":280,"line_end":280,"column_start":8,"column_end":39},"name":"encoding_from_windows_code_page","qualname":"::label::encoding_from_windows_code_page","value":"pub fn encoding_from_windows_code_page(usize) -> Option<EncodingRef>","parent":null,"children":[],"decl_id":null,"docs":" Returns an encoding from Windows code page number.\n http://msdn.microsoft.com/en-us/library/windows/desktop/dd317756%28v=vs.85%29.aspx\n Sometimes it can return a *superset* of the requested encoding, e.g. for several CJK encodings.\n","sig":null,"attributes":[{"value":"/ Returns an encoding from Windows code page number.","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/label.rs","byte_start":222345,"byte_end":222399,"line_start":277,"line_end":277,"column_start":1,"column_end":55}},{"value":"/ http://msdn.microsoft.com/en-us/library/windows/desktop/dd317756%28v=vs.85%29.aspx","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/label.rs","byte_start":222400,"byte_end":222486,"line_start":278,"line_end":278,"column_start":1,"column_end":87}},{"value":"/ Sometimes it can return a *superset* of the requested encoding, e.g. for several CJK encodings.","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/label.rs","byte_start":222487,"byte_end":222586,"line_start":279,"line_end":279,"column_start":1,"column_end":100}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/util.rs","byte_start":11022,"byte_end":11042,"line_start":25,"line_end":25,"column_start":23,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":37},{"krate":0,"index":38}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/util.rs","byte_start":12397,"byte_end":12418,"line_start":69,"line_end":69,"column_start":29,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":59},{"krate":0,"index":60},{"krate":0,"index":61},{"krate":0,"index":62},{"krate":0,"index":63},{"krate":0,"index":64},{"krate":0,"index":65}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/types.rs","byte_start":26280,"byte_end":26283,"line_start":86,"line_end":86,"column_start":21,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":77},{"krate":0,"index":78},{"krate":0,"index":79}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/types.rs","byte_start":27209,"byte_end":27215,"line_start":117,"line_end":117,"column_start":23,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":85},{"krate":0,"index":86},{"krate":0,"index":87}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Inherent","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/types.rs","byte_start":35698,"byte_end":35709,"line_start":319,"line_end":319,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":113}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/types.rs","byte_start":36230,"byte_end":36241,"line_start":332,"line_end":332,"column_start":16,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":115}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Inherent","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/types.rs","byte_start":37458,"byte_end":37469,"line_start":364,"line_end":364,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":117}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/types.rs","byte_start":38799,"byte_end":38810,"line_start":397,"line_end":397,"column_start":16,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":120}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/error.rs","byte_start":44258,"byte_end":44271,"line_start":14,"line_end":14,"column_start":19,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":131},{"krate":0,"index":132},{"krate":0,"index":133}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Inherent","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/error.rs","byte_start":44558,"byte_end":44570,"line_start":24,"line_end":24,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":135}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/error.rs","byte_start":44659,"byte_end":44671,"line_start":28,"line_end":28,"column_start":21,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":137},{"krate":0,"index":138},{"krate":0,"index":139}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Inherent","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/error.rs","byte_start":45286,"byte_end":45298,"line_start":49,"line_end":49,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":141}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/error.rs","byte_start":45387,"byte_end":45399,"line_start":53,"line_end":53,"column_start":21,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":143},{"krate":0,"index":144},{"krate":0,"index":145}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/ascii.rs","byte_start":47014,"byte_end":47027,"line_start":20,"line_end":20,"column_start":19,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":151},{"krate":0,"index":152},{"krate":0,"index":153}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Inherent","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/ascii.rs","byte_start":47298,"byte_end":47310,"line_start":30,"line_end":30,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":155}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/ascii.rs","byte_start":47399,"byte_end":47411,"line_start":34,"line_end":34,"column_start":21,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":157},{"krate":0,"index":158},{"krate":0,"index":159},{"krate":0,"index":161}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Inherent","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/ascii.rs","byte_start":48431,"byte_end":48443,"line_start":65,"line_end":65,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":163}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/ascii.rs","byte_start":48532,"byte_end":48544,"line_start":69,"line_end":69,"column_start":21,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":165},{"krate":0,"index":166},{"krate":0,"index":167},{"krate":0,"index":170}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/singlebyte.rs","byte_start":52039,"byte_end":52057,"line_start":20,"line_end":20,"column_start":19,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":178},{"krate":0,"index":179},{"krate":0,"index":180},{"krate":0,"index":181}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Inherent","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/singlebyte.rs","byte_start":52536,"byte_end":52553,"line_start":33,"line_end":33,"column_start":6,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":183}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/singlebyte.rs","byte_start":52737,"byte_end":52754,"line_start":39,"line_end":39,"column_start":21,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":185},{"krate":0,"index":186},{"krate":0,"index":187},{"krate":0,"index":188}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Inherent","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/singlebyte.rs","byte_start":53879,"byte_end":53896,"line_start":75,"line_end":75,"column_start":6,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":190}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/singlebyte.rs","byte_start":54077,"byte_end":54094,"line_start":81,"line_end":81,"column_start":21,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":192},{"krate":0,"index":193},{"krate":0,"index":194},{"krate":0,"index":195}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/utf_8.rs","byte_start":57822,"byte_end":57834,"line_start":49,"line_end":49,"column_start":19,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":206},{"krate":0,"index":207},{"krate":0,"index":208},{"krate":0,"index":209}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Inherent","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/utf_8.rs","byte_start":58170,"byte_end":58181,"line_start":60,"line_end":60,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":211}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/utf_8.rs","byte_start":58269,"byte_end":58280,"line_start":64,"line_end":64,"column_start":21,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":213},{"krate":0,"index":214},{"krate":0,"index":215},{"krate":0,"index":216}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Inherent","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/utf_8.rs","byte_start":58900,"byte_end":58911,"line_start":88,"line_end":88,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":218}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/utf_8.rs","byte_start":61529,"byte_end":61540,"line_start":141,"line_end":141,"column_start":21,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":231},{"krate":0,"index":232},{"krate":0,"index":233},{"krate":0,"index":236}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/utf_16.rs","byte_start":86430,"byte_end":86436,"line_start":33,"line_end":33,"column_start":17,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":251},{"krate":0,"index":252},{"krate":0,"index":253},{"krate":0,"index":254}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/utf_16.rs","byte_start":86805,"byte_end":86808,"line_start":45,"line_end":45,"column_start":17,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":256},{"krate":0,"index":257},{"krate":0,"index":258},{"krate":0,"index":259}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/utf_16.rs","byte_start":88331,"byte_end":88344,"line_start":87,"line_end":87,"column_start":30,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":266},{"krate":0,"index":267},{"krate":0,"index":268},{"krate":0,"index":269}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Inherent","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/utf_16.rs","byte_start":88933,"byte_end":88945,"line_start":107,"line_end":107,"column_start":17,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":272}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/utf_16.rs","byte_start":89086,"byte_end":89098,"line_start":113,"line_end":113,"column_start":32,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":275},{"krate":0,"index":276},{"krate":0,"index":278}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Inherent","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/utf_16.rs","byte_start":90670,"byte_end":90682,"line_start":160,"line_end":160,"column_start":17,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":286}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/utf_16.rs","byte_start":90905,"byte_end":90917,"line_start":167,"line_end":167,"column_start":32,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":289},{"krate":0,"index":290},{"krate":0,"index":292}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/korean.rs","byte_start":109100,"byte_end":109118,"line_start":27,"line_end":27,"column_start":19,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":300},{"krate":0,"index":301},{"krate":0,"index":302},{"krate":0,"index":303}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Inherent","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/korean.rs","byte_start":109519,"byte_end":109536,"line_start":38,"line_end":38,"column_start":6,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":305}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Direct","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/korean.rs","byte_start":109630,"byte_end":109647,"line_start":42,"line_end":42,"column_start":21,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":307},{"krate":0,"index":308},{"krate":0,"index":309},{"krate":0,"index":310}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Inherent","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/korean.rs","byte_start":110774,"byte_end":110791,"line_start":78,"line_end":78,"column_start":6,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":312}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/korean.rs","byte_start":110924,"byte_end":110941,"line_start":84,"line_end":84,"column_start":21,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":314},{"krate":0,"index":315},{"krate":0,"index":316},{"krate":0,"index":317}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/japanese.rs","byte_start":118901,"byte_end":118914,"line_start":32,"line_end":32,"column_start":19,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":329},{"krate":0,"index":330},{"krate":0,"index":331},{"krate":0,"index":332}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Inherent","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/japanese.rs","byte_start":119289,"byte_end":119301,"line_start":43,"line_end":43,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":334}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/japanese.rs","byte_start":119390,"byte_end":119402,"line_start":47,"line_end":47,"column_start":21,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":336},{"krate":0,"index":337},{"krate":0,"index":338},{"krate":0,"index":339}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Inherent","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/japanese.rs","byte_start":120977,"byte_end":120993,"line_start":92,"line_end":92,"column_start":6,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":341}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Direct","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/japanese.rs","byte_start":121125,"byte_end":121141,"line_start":98,"line_end":98,"column_start":21,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":343},{"krate":0,"index":344},{"krate":0,"index":345},{"krate":0,"index":346}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/japanese.rs","byte_start":133417,"byte_end":133435,"line_start":452,"line_end":452,"column_start":19,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":348},{"krate":0,"index":349},{"krate":0,"index":350},{"krate":0,"index":351}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Inherent","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/japanese.rs","byte_start":133851,"byte_end":133868,"line_start":463,"line_end":463,"column_start":6,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":353}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Direct","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/japanese.rs","byte_start":133962,"byte_end":133979,"line_start":467,"line_end":467,"column_start":21,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":355},{"krate":0,"index":356},{"krate":0,"index":357},{"krate":0,"index":358}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Inherent","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/japanese.rs","byte_start":135795,"byte_end":135812,"line_start":514,"line_end":514,"column_start":6,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":360}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Direct","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/japanese.rs","byte_start":135945,"byte_end":135962,"line_start":520,"line_end":520,"column_start":21,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":362},{"krate":0,"index":363},{"krate":0,"index":364},{"krate":0,"index":365}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Direct","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/japanese.rs","byte_start":145145,"byte_end":145162,"line_start":774,"line_end":774,"column_start":19,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":367},{"krate":0,"index":368},{"krate":0,"index":369},{"krate":0,"index":370}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Inherent","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/japanese.rs","byte_start":145755,"byte_end":145771,"line_start":794,"line_end":794,"column_start":6,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":372}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Direct","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/japanese.rs","byte_start":145878,"byte_end":145894,"line_start":798,"line_end":798,"column_start":21,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":374},{"krate":0,"index":375},{"krate":0,"index":376},{"krate":0,"index":380}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Inherent","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/japanese.rs","byte_start":148079,"byte_end":148095,"line_start":858,"line_end":858,"column_start":6,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":382}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Direct","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/japanese.rs","byte_start":148227,"byte_end":148243,"line_start":864,"line_end":864,"column_start":21,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":384},{"krate":0,"index":385},{"krate":0,"index":386},{"krate":0,"index":387}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Direct","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/simpchinese.rs","byte_start":169206,"byte_end":169209,"line_start":36,"line_end":36,"column_start":17,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":400},{"krate":0,"index":401},{"krate":0,"index":402}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Direct","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/simpchinese.rs","byte_start":169375,"byte_end":169382,"line_start":42,"line_end":42,"column_start":17,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":404},{"krate":0,"index":405},{"krate":0,"index":406}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Direct","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/simpchinese.rs","byte_start":171391,"byte_end":171401,"line_start":91,"line_end":91,"column_start":30,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":413},{"krate":0,"index":414},{"krate":0,"index":415},{"krate":0,"index":416}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Inherent","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/simpchinese.rs","byte_start":171953,"byte_end":171962,"line_start":111,"line_end":111,"column_start":17,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":419}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Direct","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/simpchinese.rs","byte_start":172104,"byte_end":172113,"line_start":117,"line_end":117,"column_start":32,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":422},{"krate":0,"index":423},{"krate":0,"index":424},{"krate":0,"index":425}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Inherent","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/simpchinese.rs","byte_start":174219,"byte_end":174233,"line_start":171,"line_end":171,"column_start":6,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":427}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Direct","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/simpchinese.rs","byte_start":174363,"byte_end":174377,"line_start":177,"line_end":177,"column_start":21,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":429},{"krate":0,"index":430},{"krate":0,"index":431},{"krate":0,"index":432}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Direct","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/simpchinese.rs","byte_start":186565,"byte_end":186575,"line_start":477,"line_end":477,"column_start":19,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":434},{"krate":0,"index":435},{"krate":0,"index":436},{"krate":0,"index":437}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Inherent","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/simpchinese.rs","byte_start":186912,"byte_end":186921,"line_start":490,"line_end":490,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":439}],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Direct","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/simpchinese.rs","byte_start":187026,"byte_end":187035,"line_start":494,"line_end":494,"column_start":21,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":441},{"krate":0,"index":442},{"krate":0,"index":443},{"krate":0,"index":446}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Inherent","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/simpchinese.rs","byte_start":189131,"byte_end":189140,"line_start":553,"line_end":553,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":448}],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Direct","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/simpchinese.rs","byte_start":189265,"byte_end":189274,"line_start":559,"line_end":559,"column_start":21,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":450},{"krate":0,"index":451},{"krate":0,"index":452},{"krate":0,"index":453}],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Direct","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/tradchinese.rs","byte_start":198273,"byte_end":198292,"line_start":30,"line_end":30,"column_start":19,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":461},{"krate":0,"index":462},{"krate":0,"index":463},{"krate":0,"index":464}],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Inherent","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/tradchinese.rs","byte_start":198689,"byte_end":198707,"line_start":41,"line_end":41,"column_start":6,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":466}],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Direct","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/tradchinese.rs","byte_start":198802,"byte_end":198820,"line_start":45,"line_end":45,"column_start":21,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":468},{"krate":0,"index":469},{"krate":0,"index":470},{"krate":0,"index":471}],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Inherent","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/tradchinese.rs","byte_start":200195,"byte_end":200222,"line_start":84,"line_end":84,"column_start":6,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":473}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Direct","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/tradchinese.rs","byte_start":200365,"byte_end":200392,"line_start":90,"line_end":90,"column_start":21,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":475},{"krate":0,"index":476},{"krate":0,"index":477},{"krate":0,"index":478}],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Direct","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/whatwg.rs","byte_start":207849,"byte_end":207872,"line_start":15,"line_end":15,"column_start":19,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":483},{"krate":0,"index":484},{"krate":0,"index":485},{"krate":0,"index":486}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","byte_start":9266,"byte_end":9271,"line_start":225,"line_end":225,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":67}},{"kind":"Mod","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","byte_start":9329,"byte_end":9334,"line_start":229,"line_end":229,"column_start":13,"column_end":18},"ref_id":{"krate":0,"index":127}},{"kind":"Mod","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","byte_start":9348,"byte_end":9353,"line_start":230,"line_end":230,"column_start":13,"column_end":18},"ref_id":{"krate":0,"index":146}},{"kind":"Mod","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","byte_start":9367,"byte_end":9377,"line_start":231,"line_end":231,"column_start":13,"column_end":23},"ref_id":{"krate":0,"index":171}},{"kind":"Mod","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","byte_start":9391,"byte_end":9396,"line_start":232,"line_end":232,"column_start":13,"column_end":18},"ref_id":{"krate":0,"index":199}},{"kind":"Mod","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","byte_start":9410,"byte_end":9416,"line_start":233,"line_end":233,"column_start":13,"column_end":19},"ref_id":{"krate":0,"index":240}},{"kind":"Mod","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","byte_start":9430,"byte_end":9436,"line_start":234,"line_end":234,"column_start":13,"column_end":19},"ref_id":{"krate":0,"index":293}},{"kind":"Mod","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","byte_start":9450,"byte_end":9458,"line_start":235,"line_end":235,"column_start":13,"column_end":21},"ref_id":{"krate":0,"index":318}},{"kind":"Mod","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","byte_start":9472,"byte_end":9483,"line_start":236,"line_end":236,"column_start":13,"column_end":24},"ref_id":{"krate":0,"index":388}},{"kind":"Mod","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","byte_start":9497,"byte_end":9508,"line_start":237,"line_end":237,"column_start":13,"column_end":24},"ref_id":{"krate":0,"index":454}},{"kind":"Mod","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","byte_start":9522,"byte_end":9528,"line_start":238,"line_end":238,"column_start":13,"column_end":19},"ref_id":{"krate":0,"index":479}},{"kind":"Mod","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","byte_start":9541,"byte_end":9544,"line_start":241,"line_end":241,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":490}},{"kind":"Mod","span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/lib.rs","byte_start":9554,"byte_end":9559,"line_start":242,"line_end":242,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":501}}],"macro_refs":[],"relations":[{"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/util.rs","byte_start":11022,"byte_end":11042,"line_start":25,"line_end":25,"column_start":23,"column_end":43},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":31},"to":{"krate":2,"index":4989}},{"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/util.rs","byte_start":12397,"byte_end":12418,"line_start":69,"line_end":69,"column_start":29,"column_end":50},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":45},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/types.rs","byte_start":26280,"byte_end":26283,"line_start":86,"line_end":86,"column_start":21,"column_end":24},"kind":{"Impl":{"id":2}},"from":{"krate":5,"index":4232},"to":{"krate":0,"index":72}},{"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/types.rs","byte_start":27209,"byte_end":27215,"line_start":117,"line_end":117,"column_start":23,"column_end":29},"kind":{"Impl":{"id":3}},"from":{"krate":5,"index":4932},"to":{"krate":0,"index":80}},{"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/types.rs","byte_start":35698,"byte_end":35709,"line_start":319,"line_end":319,"column_start":6,"column_end":17},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":507},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/types.rs","byte_start":36230,"byte_end":36241,"line_start":332,"line_end":332,"column_start":16,"column_end":27},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":507},"to":{"krate":2,"index":1625}},{"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/types.rs","byte_start":37458,"byte_end":37469,"line_start":364,"line_end":364,"column_start":6,"column_end":17},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":518},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/types.rs","byte_start":38799,"byte_end":38810,"line_start":397,"line_end":397,"column_start":16,"column_end":27},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":518},"to":{"krate":2,"index":1625}},{"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/error.rs","byte_start":44258,"byte_end":44271,"line_start":14,"line_end":14,"column_start":19,"column_end":32},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":531},"to":{"krate":0,"index":99}},{"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/error.rs","byte_start":44558,"byte_end":44570,"line_start":24,"line_end":24,"column_start":6,"column_end":18},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":536},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/error.rs","byte_start":44659,"byte_end":44671,"line_start":28,"line_end":28,"column_start":21,"column_end":33},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":536},"to":{"krate":0,"index":88}},{"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/error.rs","byte_start":45286,"byte_end":45298,"line_start":49,"line_end":49,"column_start":6,"column_end":18},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":541},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/error.rs","byte_start":45387,"byte_end":45399,"line_start":53,"line_end":53,"column_start":21,"column_end":33},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":541},"to":{"krate":0,"index":93}},{"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/ascii.rs","byte_start":47014,"byte_end":47027,"line_start":20,"line_end":20,"column_start":19,"column_end":32},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":546},"to":{"krate":0,"index":99}},{"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/ascii.rs","byte_start":47298,"byte_end":47310,"line_start":30,"line_end":30,"column_start":6,"column_end":18},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":551},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/ascii.rs","byte_start":47399,"byte_end":47411,"line_start":34,"line_end":34,"column_start":21,"column_end":33},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":551},"to":{"krate":0,"index":88}},{"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/ascii.rs","byte_start":48431,"byte_end":48443,"line_start":65,"line_end":65,"column_start":6,"column_end":18},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":556},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/ascii.rs","byte_start":48532,"byte_end":48544,"line_start":69,"line_end":69,"column_start":21,"column_end":33},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":556},"to":{"krate":0,"index":93}},{"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/singlebyte.rs","byte_start":52039,"byte_end":52057,"line_start":20,"line_end":20,"column_start":19,"column_end":37},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":561},"to":{"krate":0,"index":99}},{"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/singlebyte.rs","byte_start":52536,"byte_end":52553,"line_start":33,"line_end":33,"column_start":6,"column_end":23},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":569},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/singlebyte.rs","byte_start":52737,"byte_end":52754,"line_start":39,"line_end":39,"column_start":21,"column_end":38},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":569},"to":{"krate":0,"index":88}},{"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/singlebyte.rs","byte_start":53879,"byte_end":53896,"line_start":75,"line_end":75,"column_start":6,"column_end":23},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":574},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/singlebyte.rs","byte_start":54077,"byte_end":54094,"line_start":81,"line_end":81,"column_start":21,"column_end":38},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":574},"to":{"krate":0,"index":93}},{"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/utf_8.rs","byte_start":57822,"byte_end":57834,"line_start":49,"line_end":49,"column_start":19,"column_end":31},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":579},"to":{"krate":0,"index":99}},{"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/utf_8.rs","byte_start":58170,"byte_end":58181,"line_start":60,"line_end":60,"column_start":6,"column_end":17},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":584},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/utf_8.rs","byte_start":58269,"byte_end":58280,"line_start":64,"line_end":64,"column_start":21,"column_end":32},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":584},"to":{"krate":0,"index":88}},{"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/utf_8.rs","byte_start":58900,"byte_end":58911,"line_start":88,"line_end":88,"column_start":6,"column_end":17},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":589},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/utf_8.rs","byte_start":61529,"byte_end":61540,"line_start":141,"line_end":141,"column_start":21,"column_end":32},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":589},"to":{"krate":0,"index":93}},{"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/utf_16.rs","byte_start":86195,"byte_end":86200,"line_start":26,"line_end":26,"column_start":19,"column_end":24},"kind":"SuperTrait","from":{"krate":2,"index":1625},"to":{"krate":0,"index":245}},{"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/utf_16.rs","byte_start":86430,"byte_end":86436,"line_start":33,"line_end":33,"column_start":17,"column_end":23},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":598},"to":{"krate":0,"index":245}},{"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/utf_16.rs","byte_start":86805,"byte_end":86808,"line_start":45,"line_end":45,"column_start":17,"column_end":20},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":603},"to":{"krate":0,"index":245}},{"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/utf_16.rs","byte_start":88331,"byte_end":88344,"line_start":87,"line_end":87,"column_start":30,"column_end":43},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":608},"to":{"krate":0,"index":99}},{"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/utf_16.rs","byte_start":88933,"byte_end":88945,"line_start":107,"line_end":107,"column_start":17,"column_end":29},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":616},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/utf_16.rs","byte_start":89086,"byte_end":89098,"line_start":113,"line_end":113,"column_start":32,"column_end":44},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":616},"to":{"krate":0,"index":88}},{"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/utf_16.rs","byte_start":90670,"byte_end":90682,"line_start":160,"line_end":160,"column_start":17,"column_end":29},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":279},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/utf_16.rs","byte_start":90905,"byte_end":90917,"line_start":167,"line_end":167,"column_start":32,"column_end":44},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":279},"to":{"krate":0,"index":93}},{"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/korean.rs","byte_start":109100,"byte_end":109118,"line_start":27,"line_end":27,"column_start":19,"column_end":37},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":624},"to":{"krate":0,"index":99}},{"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/korean.rs","byte_start":109519,"byte_end":109536,"line_start":38,"line_end":38,"column_start":6,"column_end":23},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":629},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/korean.rs","byte_start":109630,"byte_end":109647,"line_start":42,"line_end":42,"column_start":21,"column_end":38},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":629},"to":{"krate":0,"index":88}},{"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/korean.rs","byte_start":110774,"byte_end":110791,"line_start":78,"line_end":78,"column_start":6,"column_end":23},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":634},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/korean.rs","byte_start":110924,"byte_end":110941,"line_start":84,"line_end":84,"column_start":21,"column_end":38},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":634},"to":{"krate":0,"index":93}},{"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/japanese.rs","byte_start":118901,"byte_end":118914,"line_start":32,"line_end":32,"column_start":19,"column_end":32},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":678},"to":{"krate":0,"index":99}},{"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/japanese.rs","byte_start":119289,"byte_end":119301,"line_start":43,"line_end":43,"column_start":6,"column_end":18},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":683},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/japanese.rs","byte_start":119390,"byte_end":119402,"line_start":47,"line_end":47,"column_start":21,"column_end":33},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":683},"to":{"krate":0,"index":88}},{"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/japanese.rs","byte_start":120977,"byte_end":120993,"line_start":92,"line_end":92,"column_start":6,"column_end":22},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":688},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/japanese.rs","byte_start":121125,"byte_end":121141,"line_start":98,"line_end":98,"column_start":21,"column_end":37},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":688},"to":{"krate":0,"index":93}},{"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/japanese.rs","byte_start":133417,"byte_end":133435,"line_start":452,"line_end":452,"column_start":19,"column_end":37},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":750},"to":{"krate":0,"index":99}},{"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/japanese.rs","byte_start":133851,"byte_end":133868,"line_start":463,"line_end":463,"column_start":6,"column_end":23},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":755},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/japanese.rs","byte_start":133962,"byte_end":133979,"line_start":467,"line_end":467,"column_start":21,"column_end":38},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":755},"to":{"krate":0,"index":88}},{"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/japanese.rs","byte_start":135795,"byte_end":135812,"line_start":514,"line_end":514,"column_start":6,"column_end":23},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":760},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/japanese.rs","byte_start":135945,"byte_end":135962,"line_start":520,"line_end":520,"column_start":21,"column_end":38},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":760},"to":{"krate":0,"index":93}},{"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/japanese.rs","byte_start":145145,"byte_end":145162,"line_start":774,"line_end":774,"column_start":19,"column_end":36},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":804},"to":{"krate":0,"index":99}},{"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/japanese.rs","byte_start":145755,"byte_end":145771,"line_start":794,"line_end":794,"column_start":6,"column_end":22},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":822},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/japanese.rs","byte_start":145878,"byte_end":145894,"line_start":798,"line_end":798,"column_start":21,"column_end":37},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":822},"to":{"krate":0,"index":88}},{"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/japanese.rs","byte_start":148079,"byte_end":148095,"line_start":858,"line_end":858,"column_start":6,"column_end":22},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":827},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/japanese.rs","byte_start":148227,"byte_end":148243,"line_start":864,"line_end":864,"column_start":21,"column_end":37},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":827},"to":{"krate":0,"index":93}},{"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/simpchinese.rs","byte_start":169057,"byte_end":169062,"line_start":30,"line_end":30,"column_start":19,"column_end":24},"kind":"SuperTrait","from":{"krate":2,"index":1625},"to":{"krate":0,"index":395}},{"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/simpchinese.rs","byte_start":169206,"byte_end":169209,"line_start":36,"line_end":36,"column_start":17,"column_end":20},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":923},"to":{"krate":0,"index":395}},{"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/simpchinese.rs","byte_start":169375,"byte_end":169382,"line_start":42,"line_end":42,"column_start":17,"column_end":24},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":928},"to":{"krate":0,"index":395}},{"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/simpchinese.rs","byte_start":171391,"byte_end":171401,"line_start":91,"line_end":91,"column_start":30,"column_end":40},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":933},"to":{"krate":0,"index":99}},{"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/simpchinese.rs","byte_start":171953,"byte_end":171962,"line_start":111,"line_end":111,"column_start":17,"column_end":26},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":941},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/simpchinese.rs","byte_start":172104,"byte_end":172113,"line_start":117,"line_end":117,"column_start":32,"column_end":41},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":941},"to":{"krate":0,"index":88}},{"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/simpchinese.rs","byte_start":174219,"byte_end":174233,"line_start":171,"line_end":171,"column_start":6,"column_end":20},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":949},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/simpchinese.rs","byte_start":174363,"byte_end":174377,"line_start":177,"line_end":177,"column_start":21,"column_end":35},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":949},"to":{"krate":0,"index":93}},{"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/simpchinese.rs","byte_start":186565,"byte_end":186575,"line_start":477,"line_end":477,"column_start":19,"column_end":29},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":1010},"to":{"krate":0,"index":99}},{"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/simpchinese.rs","byte_start":186912,"byte_end":186921,"line_start":490,"line_end":490,"column_start":6,"column_end":15},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":1015},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/simpchinese.rs","byte_start":187026,"byte_end":187035,"line_start":494,"line_end":494,"column_start":21,"column_end":30},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":1015},"to":{"krate":0,"index":88}},{"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/simpchinese.rs","byte_start":189131,"byte_end":189140,"line_start":553,"line_end":553,"column_start":6,"column_end":15},"kind":{"Impl":{"id":65}},"from":{"krate":0,"index":1020},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/simpchinese.rs","byte_start":189265,"byte_end":189274,"line_start":559,"line_end":559,"column_start":21,"column_end":30},"kind":{"Impl":{"id":66}},"from":{"krate":0,"index":1020},"to":{"krate":0,"index":93}},{"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/tradchinese.rs","byte_start":198273,"byte_end":198292,"line_start":30,"line_end":30,"column_start":19,"column_end":38},"kind":{"Impl":{"id":67}},"from":{"krate":0,"index":1082},"to":{"krate":0,"index":99}},{"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/tradchinese.rs","byte_start":198689,"byte_end":198707,"line_start":41,"line_end":41,"column_start":6,"column_end":24},"kind":{"Impl":{"id":68}},"from":{"krate":0,"index":1087},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/tradchinese.rs","byte_start":198802,"byte_end":198820,"line_start":45,"line_end":45,"column_start":21,"column_end":39},"kind":{"Impl":{"id":69}},"from":{"krate":0,"index":1087},"to":{"krate":0,"index":88}},{"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/tradchinese.rs","byte_start":200195,"byte_end":200222,"line_start":84,"line_end":84,"column_start":6,"column_end":33},"kind":{"Impl":{"id":70}},"from":{"krate":0,"index":1092},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/tradchinese.rs","byte_start":200365,"byte_end":200392,"line_start":90,"line_end":90,"column_start":21,"column_end":48},"kind":{"Impl":{"id":71}},"from":{"krate":0,"index":1092},"to":{"krate":0,"index":93}},{"span":{"file_name":"/home/mich/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding-0.2.33/src/codec/whatwg.rs","byte_start":207849,"byte_end":207872,"line_start":15,"line_end":15,"column_start":19,"column_end":42},"kind":{"Impl":{"id":72}},"from":{"krate":0,"index":1136},"to":{"krate":0,"index":99}}]}